
StackerGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000980  00000a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000980  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080012c  0080012c  00000a40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012c2  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3d  00000000  00000000  00001e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000945  00000000  00000000  0000289f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  000031e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006af  00000000  00000000  00003438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000083a  00000000  00000000  00003ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004321  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__vector_13>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	e0 01       	movw	r28, r0
  8e:	f2 01       	movw	r30, r4
  90:	04 02       	muls	r16, r20
  92:	16 02       	muls	r17, r22
  94:	28 02       	muls	r18, r24
  96:	3a 02       	muls	r19, r26
  98:	4c 02       	muls	r20, r28
  9a:	5e 02       	muls	r21, r30

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e0 e8       	ldi	r30, 0x80	; 128
  b0:	f9 e0       	ldi	r31, 0x09	; 9
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	ac 32       	cpi	r26, 0x2C	; 44
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	ac e2       	ldi	r26, 0x2C	; 44
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	ac 34       	cpi	r26, 0x4C	; 76
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	0b d2       	rcall	.+1046   	; 0x4ea <main>
  d4:	53 c4       	rjmp	.+2214   	; 0x97c <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <TimerSet>:
    set_PWM(0);
}

void PWM_off() {
    TCCR3A = 0x00;
    TCCR3B = 0x00;
  d8:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <_avr_timer_M>
  dc:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <_avr_timer_M+0x1>
  e0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_avr_timer_M+0x2>
  e4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <_avr_timer_M+0x3>
  e8:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <_avr_timer_cntcurr>
  ec:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <_avr_timer_cntcurr+0x1>
  f0:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <_avr_timer_cntcurr+0x2>
  f4:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <_avr_timer_cntcurr+0x3>
  f8:	08 95       	ret

000000fa <TimerOn>:
  fa:	8b e0       	ldi	r24, 0x0B	; 11
  fc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 100:	8d e7       	ldi	r24, 0x7D	; 125
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 108:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 112:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 116:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 11a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <_avr_timer_M>
 11e:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <_avr_timer_M+0x1>
 122:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <_avr_timer_M+0x2>
 126:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <_avr_timer_M+0x3>
 12a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_avr_timer_cntcurr>
 12e:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_avr_timer_cntcurr+0x1>
 132:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <_avr_timer_cntcurr+0x2>
 136:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <_avr_timer_cntcurr+0x3>
 13a:	8f b7       	in	r24, 0x3f	; 63
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	8f bf       	out	0x3f, r24	; 63
 140:	08 95       	ret

00000142 <__vector_13>:
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <_avr_timer_cntcurr>
 158:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <_avr_timer_cntcurr+0x1>
 15c:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <_avr_timer_cntcurr+0x2>
 160:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <_avr_timer_cntcurr+0x3>
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	a1 09       	sbc	r26, r1
 168:	b1 09       	sbc	r27, r1
 16a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_avr_timer_cntcurr>
 16e:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_avr_timer_cntcurr+0x1>
 172:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <_avr_timer_cntcurr+0x2>
 176:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <_avr_timer_cntcurr+0x3>
 17a:	89 2b       	or	r24, r25
 17c:	8a 2b       	or	r24, r26
 17e:	8b 2b       	or	r24, r27
 180:	99 f4       	brne	.+38     	; 0x1a8 <__vector_13+0x66>
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <TimerFlag>
 188:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <_avr_timer_M>
 18c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <_avr_timer_M+0x1>
 190:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <_avr_timer_M+0x2>
 194:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <_avr_timer_M+0x3>
 198:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_avr_timer_cntcurr>
 19c:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_avr_timer_cntcurr+0x1>
 1a0:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <_avr_timer_cntcurr+0x2>
 1a4:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <_avr_timer_cntcurr+0x3>
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <set_PWM>:
 1ba:	cf 92       	push	r12
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	6b 01       	movw	r12, r22
 1c4:	7c 01       	movw	r14, r24
 1c6:	9b 01       	movw	r18, r22
 1c8:	ac 01       	movw	r20, r24
 1ca:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <current_frequency.2069>
 1ce:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <current_frequency.2069+0x1>
 1d2:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <current_frequency.2069+0x2>
 1d6:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <current_frequency.2069+0x3>
 1da:	11 d2       	rcall	.+1058   	; 0x5fe <__cmpsf2>
 1dc:	88 23       	and	r24, r24
 1de:	09 f4       	brne	.+2      	; 0x1e2 <set_PWM+0x28>
 1e0:	52 c0       	rjmp	.+164    	; 0x286 <set_PWM+0xcc>
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	a9 01       	movw	r20, r18
 1e8:	c7 01       	movw	r24, r14
 1ea:	b6 01       	movw	r22, r12
 1ec:	08 d2       	rcall	.+1040   	; 0x5fe <__cmpsf2>
 1ee:	81 11       	cpse	r24, r1
 1f0:	06 c0       	rjmp	.+12     	; 0x1fe <set_PWM+0x44>
 1f2:	e1 e9       	ldi	r30, 0x91	; 145
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	88 70       	andi	r24, 0x08	; 8
 1fa:	80 83       	st	Z, r24
 1fc:	05 c0       	rjmp	.+10     	; 0x208 <set_PWM+0x4e>
 1fe:	e1 e9       	ldi	r30, 0x91	; 145
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	83 60       	ori	r24, 0x03	; 3
 206:	80 83       	st	Z, r24
 208:	28 e5       	ldi	r18, 0x58	; 88
 20a:	39 e3       	ldi	r19, 0x39	; 57
 20c:	44 e7       	ldi	r20, 0x74	; 116
 20e:	5f e3       	ldi	r21, 0x3F	; 63
 210:	c7 01       	movw	r24, r14
 212:	b6 01       	movw	r22, r12
 214:	f4 d1       	rcall	.+1000   	; 0x5fe <__cmpsf2>
 216:	88 23       	and	r24, r24
 218:	3c f4       	brge	.+14     	; 0x228 <set_PWM+0x6e>
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	9f ef       	ldi	r25, 0xFF	; 255
 21e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 222:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 226:	23 c0       	rjmp	.+70     	; 0x26e <set_PWM+0xb4>
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	34 e2       	ldi	r19, 0x24	; 36
 22c:	44 ef       	ldi	r20, 0xF4	; 244
 22e:	56 e4       	ldi	r21, 0x46	; 70
 230:	c7 01       	movw	r24, r14
 232:	b6 01       	movw	r22, r12
 234:	33 d3       	rcall	.+1638   	; 0x89c <__gesf2>
 236:	18 16       	cp	r1, r24
 238:	2c f4       	brge	.+10     	; 0x244 <set_PWM+0x8a>
 23a:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 23e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 242:	15 c0       	rjmp	.+42     	; 0x26e <set_PWM+0xb4>
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	53 e4       	ldi	r21, 0x43	; 67
 24c:	c7 01       	movw	r24, r14
 24e:	b6 01       	movw	r22, r12
 250:	29 d3       	rcall	.+1618   	; 0x8a4 <__mulsf3>
 252:	9b 01       	movw	r18, r22
 254:	ac 01       	movw	r20, r24
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	74 e2       	ldi	r23, 0x24	; 36
 25a:	84 ef       	ldi	r24, 0xF4	; 244
 25c:	9a e4       	ldi	r25, 0x4A	; 74
 25e:	d3 d1       	rcall	.+934    	; 0x606 <__divsf3>
 260:	3a d2       	rcall	.+1140   	; 0x6d6 <__fixsfsi>
 262:	61 50       	subi	r22, 0x01	; 1
 264:	71 09       	sbc	r23, r1
 266:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 26a:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 26e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 272:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 276:	c0 92 43 01 	sts	0x0143, r12	; 0x800143 <current_frequency.2069>
 27a:	d0 92 44 01 	sts	0x0144, r13	; 0x800144 <current_frequency.2069+0x1>
 27e:	e0 92 45 01 	sts	0x0145, r14	; 0x800145 <current_frequency.2069+0x2>
 282:	f0 92 46 01 	sts	0x0146, r15	; 0x800146 <current_frequency.2069+0x3>
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	df 90       	pop	r13
 28c:	cf 90       	pop	r12
 28e:	08 95       	ret

00000290 <SMTick1>:
 290:	cf 93       	push	r28
 292:	26 b1       	in	r18, 0x06	; 6
 294:	36 b1       	in	r19, 0x06	; 6
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	91 05       	cpc	r25, r1
 29a:	51 f0       	breq	.+20     	; 0x2b0 <SMTick1+0x20>
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	91 05       	cpc	r25, r1
 2a0:	89 f0       	breq	.+34     	; 0x2c4 <SMTick1+0x34>
 2a2:	89 2b       	or	r24, r25
 2a4:	a1 f4       	brne	.+40     	; 0x2ce <SMTick1+0x3e>
 2a6:	20 ff       	sbrs	r18, 0
 2a8:	26 c0       	rjmp	.+76     	; 0x2f6 <SMTick1+0x66>
 2aa:	31 ff       	sbrs	r19, 1
 2ac:	41 c0       	rjmp	.+130    	; 0x330 <SMTick1+0xa0>
 2ae:	1a c0       	rjmp	.+52     	; 0x2e4 <SMTick1+0x54>
 2b0:	31 e0       	ldi	r19, 0x01	; 1
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <tick1.2097>
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	09 f4       	brne	.+2      	; 0x2be <SMTick1+0x2e>
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	83 2f       	mov	r24, r19
 2c0:	92 2f       	mov	r25, r18
 2c2:	07 c0       	rjmp	.+14     	; 0x2d2 <SMTick1+0x42>
 2c4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <tick1.2097>
 2c8:	82 30       	cpi	r24, 0x02	; 2
 2ca:	91 f5       	brne	.+100    	; 0x330 <SMTick1+0xa0>
 2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <SMTick1+0x54>
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	91 05       	cpc	r25, r1
 2d6:	79 f0       	breq	.+30     	; 0x2f6 <SMTick1+0x66>
 2d8:	82 30       	cpi	r24, 0x02	; 2
 2da:	91 05       	cpc	r25, r1
 2dc:	49 f1       	breq	.+82     	; 0x330 <SMTick1+0xa0>
 2de:	00 97       	sbiw	r24, 0x00	; 0
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <SMTick1+0x54>
 2e2:	42 c0       	rjmp	.+132    	; 0x368 <SMTick1+0xd8>
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	cb 01       	movw	r24, r22
 2ea:	67 df       	rcall	.-306    	; 0x1ba <set_PWM>
 2ec:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <tick1.2097>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	39 c0       	rjmp	.+114    	; 0x368 <SMTick1+0xd8>
 2f6:	c0 91 42 01 	lds	r28, 0x0142	; 0x800142 <tick1.2097>
 2fa:	c1 11       	cpse	r28, r1
 2fc:	09 c0       	rjmp	.+18     	; 0x310 <SMTick1+0x80>
 2fe:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <success>
 302:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <success+0x1>
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	16 d2       	rcall	.+1068   	; 0x738 <__floatunsisf>
 30c:	56 df       	rcall	.-340    	; 0x1ba <set_PWM>
 30e:	0a c0       	rjmp	.+20     	; 0x324 <SMTick1+0x94>
 310:	c1 30       	cpi	r28, 0x01	; 1
 312:	41 f4       	brne	.+16     	; 0x324 <SMTick1+0x94>
 314:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <success+0x2>
 318:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <success+0x3>
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0b d2       	rcall	.+1046   	; 0x738 <__floatunsisf>
 322:	4b df       	rcall	.-362    	; 0x1ba <set_PWM>
 324:	cf 5f       	subi	r28, 0xFF	; 255
 326:	c0 93 42 01 	sts	0x0142, r28	; 0x800142 <tick1.2097>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	1c c0       	rjmp	.+56     	; 0x368 <SMTick1+0xd8>
 330:	c0 91 42 01 	lds	r28, 0x0142	; 0x800142 <tick1.2097>
 334:	c1 11       	cpse	r28, r1
 336:	09 c0       	rjmp	.+18     	; 0x34a <SMTick1+0xba>
 338:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <fail>
 33c:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <fail+0x1>
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	f9 d1       	rcall	.+1010   	; 0x738 <__floatunsisf>
 346:	39 df       	rcall	.-398    	; 0x1ba <set_PWM>
 348:	0a c0       	rjmp	.+20     	; 0x35e <SMTick1+0xce>
 34a:	c1 30       	cpi	r28, 0x01	; 1
 34c:	41 f4       	brne	.+16     	; 0x35e <SMTick1+0xce>
 34e:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <fail+0x2>
 352:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <fail+0x3>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	ee d1       	rcall	.+988    	; 0x738 <__floatunsisf>
 35c:	2e df       	rcall	.-420    	; 0x1ba <set_PWM>
 35e:	cf 5f       	subi	r28, 0xFF	; 255
 360:	c0 93 42 01 	sts	0x0142, r28	; 0x800142 <tick1.2097>
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <PWM_on>:
 36c:	80 e4       	ldi	r24, 0x40	; 64
 36e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 372:	8b e0       	ldi	r24, 0x0B	; 11
 374:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	cb 01       	movw	r24, r22
 37e:	1d cf       	rjmp	.-454    	; 0x1ba <set_PWM>
 380:	08 95       	ret

00000382 <transmit_data>:
#define SER 0x01
#define RCLK 0x02
#define SRCLK 0x04
#define SRCLR 0x08

void transmit_data(uc data) {
 382:	28 e0       	ldi	r18, 0x08	; 8
	// for each bit of data
	for(uc i = 0; i < 8; ++i){
		// Set SRCLR to 1 allowing data to be set
		// Also clear SRCLK in preparation of sending data
		PORTB = SRCLR;
 384:	38 e0       	ldi	r19, 0x08	; 8
 386:	35 b9       	out	0x05, r19	; 5
		// set SER = next bit of data to be sent.
		uc sendBit = (SRCLR | (SER & data));
		data = data >> 1;
		// set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		PORTB = (sendBit | SRCLK);
 388:	98 2f       	mov	r25, r24
 38a:	91 70       	andi	r25, 0x01	; 1
 38c:	9c 60       	ori	r25, 0x0C	; 12
 38e:	86 95       	lsr	r24
 390:	95 b9       	out	0x05, r25	; 5
 392:	21 50       	subi	r18, 0x01	; 1
#define SRCLK 0x04
#define SRCLR 0x08

void transmit_data(uc data) {
	// for each bit of data
	for(uc i = 0; i < 8; ++i){
 394:	c1 f7       	brne	.-16     	; 0x386 <transmit_data+0x4>
		// set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		PORTB = (sendBit | SRCLK);
		// end for each bit of data
	}
	// set RCLK = 1. Rising edge copies data from the "Shift" register to the "Storage" register
	PORTB = (SRCLR | RCLK);
 396:	8a e0       	ldi	r24, 0x0A	; 10
 398:	85 b9       	out	0x05, r24	; 5
 39a:	08 95       	ret

0000039c <clear_data>:
	// clears all lines in preparation of a new transmission
	//PORTB = 0x00;
}

void clear_data() {
	PORTB = SRCLK;
 39c:	84 e0       	ldi	r24, 0x04	; 4
 39e:	85 b9       	out	0x05, r24	; 5
	PORTB = RCLK;
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	85 b9       	out	0x05, r24	; 5
 3a4:	08 95       	ret

000003a6 <SMTick2>:
	return state;
}

enum displayState { ROW1, ROW2, ROW3, ROW4, ROW5, ROW6, ROW7, ROW8 };

int SMTick2(int state) {
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	ec 01       	movw	r28, r24
	clear_data();
 3ac:	f7 df       	rcall	.-18     	; 0x39c <clear_data>
	clear_data();
 3ae:	f6 df       	rcall	.-20     	; 0x39c <clear_data>
 3b0:	c8 30       	cpi	r28, 0x08	; 8
	
	switch(state) {
 3b2:	d1 05       	cpc	r29, r1
 3b4:	08 f0       	brcs	.+2      	; 0x3b8 <SMTick2+0x12>
 3b6:	94 c0       	rjmp	.+296    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 3b8:	fe 01       	movw	r30, r28
 3ba:	ea 5b       	subi	r30, 0xBA	; 186
 3bc:	ff 4f       	sbci	r31, 0xFF	; 255
 3be:	d5 c2       	rjmp	.+1450   	; 0x96a <__tablejump2__>
		case ROW1:
			transmit_data(0x7F);//Select Row
 3c0:	8f e7       	ldi	r24, 0x7F	; 127
 3c2:	df df       	rcall	.-66     	; 0x382 <transmit_data>
 3c4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <placedBlocks>
			if(placedBlocks[0] != 0) {
 3c8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <placedBlocks+0x1>
 3cc:	00 97       	sbiw	r24, 0x00	; 0
 3ce:	21 f0       	breq	.+8      	; 0x3d8 <SMTick2+0x32>
				transmit_data(placedBlocks[0]);
 3d0:	d8 df       	rcall	.-80     	; 0x382 <transmit_data>
 3d2:	81 e0       	ldi	r24, 0x01	; 1
			}
			else {
				transmit_data(currentBlocks[0]);
			}
			state = ROW2;
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	86 c0       	rjmp	.+268    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
			transmit_data(0x7F);//Select Row
			if(placedBlocks[0] != 0) {
				transmit_data(placedBlocks[0]);
			}
			else {
				transmit_data(currentBlocks[0]);
 3d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3dc:	d2 df       	rcall	.-92     	; 0x382 <transmit_data>
			}
			state = ROW2;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	80 c0       	rjmp	.+256    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
			break;
		case ROW2:
			transmit_data(0xBF);//Select Row
 3e4:	8f eb       	ldi	r24, 0xBF	; 191
 3e6:	cd df       	rcall	.-102    	; 0x382 <transmit_data>
			if(placedBlocks[1] != 0) {
 3e8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <placedBlocks+0x2>
 3ec:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <placedBlocks+0x3>
 3f0:	00 97       	sbiw	r24, 0x00	; 0
				transmit_data(placedBlocks[1]);
 3f2:	21 f0       	breq	.+8      	; 0x3fc <SMTick2+0x56>
 3f4:	c6 df       	rcall	.-116    	; 0x382 <transmit_data>
			}
			else {
				transmit_data(currentBlocks[1]);
			}
			state = ROW3;
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	90 e0       	ldi	r25, 0x00	; 0
			transmit_data(0xBF);//Select Row
			if(placedBlocks[1] != 0) {
				transmit_data(placedBlocks[1]);
			}
			else {
				transmit_data(currentBlocks[1]);
 3fa:	74 c0       	rjmp	.+232    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 3fc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 400:	c0 df       	rcall	.-128    	; 0x382 <transmit_data>
			}
			state = ROW3;
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case ROW3:
			transmit_data(0xDF);//Select Row
 406:	6e c0       	rjmp	.+220    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 408:	8f ed       	ldi	r24, 0xDF	; 223
 40a:	bb df       	rcall	.-138    	; 0x382 <transmit_data>
			if(placedBlocks[2] != 0) {
 40c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <placedBlocks+0x4>
 410:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <placedBlocks+0x5>
 414:	00 97       	sbiw	r24, 0x00	; 0
				transmit_data(placedBlocks[2]);
 416:	21 f0       	breq	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			}
			else {
				transmit_data(currentBlocks[2]);
			}
			state = ROW4;
 418:	b4 df       	rcall	.-152    	; 0x382 <transmit_data>
 41a:	83 e0       	ldi	r24, 0x03	; 3
 41c:	90 e0       	ldi	r25, 0x00	; 0
			transmit_data(0xDF);//Select Row
			if(placedBlocks[2] != 0) {
				transmit_data(placedBlocks[2]);
			}
			else {
				transmit_data(currentBlocks[2]);
 41e:	62 c0       	rjmp	.+196    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 420:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_start+0x4>
			}
			state = ROW4;
 424:	ae df       	rcall	.-164    	; 0x382 <transmit_data>
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case ROW4:
			transmit_data(0xEF);//Select Row
 42a:	5c c0       	rjmp	.+184    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 42c:	8f ee       	ldi	r24, 0xEF	; 239
			if(placedBlocks[3] != 0) {
 42e:	a9 df       	rcall	.-174    	; 0x382 <transmit_data>
 430:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <placedBlocks+0x6>
 434:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <placedBlocks+0x7>
				transmit_data(placedBlocks[3]);
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	21 f0       	breq	.+8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			}
			else {
				transmit_data(currentBlocks[3]);
			}
			state = ROW5;
 43c:	a2 df       	rcall	.-188    	; 0x382 <transmit_data>
 43e:	84 e0       	ldi	r24, 0x04	; 4
 440:	90 e0       	ldi	r25, 0x00	; 0
			transmit_data(0xEF);//Select Row
			if(placedBlocks[3] != 0) {
				transmit_data(placedBlocks[3]);
			}
			else {
				transmit_data(currentBlocks[3]);
 442:	50 c0       	rjmp	.+160    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 444:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_start+0x6>
			}
			state = ROW5;
 448:	9c df       	rcall	.-200    	; 0x382 <transmit_data>
 44a:	84 e0       	ldi	r24, 0x04	; 4
			break;
		case ROW5:
			transmit_data(0xF7);//Select Row
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	4a c0       	rjmp	.+148    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 450:	87 ef       	ldi	r24, 0xF7	; 247
			if(placedBlocks[4] != 0) {
 452:	97 df       	rcall	.-210    	; 0x382 <transmit_data>
 454:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <placedBlocks+0x8>
 458:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <placedBlocks+0x9>
				transmit_data(placedBlocks[4]);
 45c:	00 97       	sbiw	r24, 0x00	; 0
 45e:	21 f0       	breq	.+8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			}
			else {
				transmit_data(currentBlocks[4]);
			}
			state = ROW6;
 460:	90 df       	rcall	.-224    	; 0x382 <transmit_data>
 462:	85 e0       	ldi	r24, 0x05	; 5
			transmit_data(0xF7);//Select Row
			if(placedBlocks[4] != 0) {
				transmit_data(placedBlocks[4]);
			}
			else {
				transmit_data(currentBlocks[4]);
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	3e c0       	rjmp	.+124    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 468:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_start+0x8>
			}
			state = ROW6;
 46c:	8a df       	rcall	.-236    	; 0x382 <transmit_data>
 46e:	85 e0       	ldi	r24, 0x05	; 5
			break;
		case ROW6:
			transmit_data(0xFB);//Select Row
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	38 c0       	rjmp	.+112    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
			if(placedBlocks[5] != 0) {
 474:	8b ef       	ldi	r24, 0xFB	; 251
 476:	85 df       	rcall	.-246    	; 0x382 <transmit_data>
 478:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <placedBlocks+0xa>
 47c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <placedBlocks+0xb>
				transmit_data(placedBlocks[5]);
 480:	00 97       	sbiw	r24, 0x00	; 0
			}
			else {
				transmit_data(currentBlocks[5]);
			}
			state = ROW7;
 482:	21 f0       	breq	.+8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 484:	7e df       	rcall	.-260    	; 0x382 <transmit_data>
 486:	86 e0       	ldi	r24, 0x06	; 6
			transmit_data(0xFB);//Select Row
			if(placedBlocks[5] != 0) {
				transmit_data(placedBlocks[5]);
			}
			else {
				transmit_data(currentBlocks[5]);
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	2c c0       	rjmp	.+88     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 48c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_start+0xa>
			}
			state = ROW7;
 490:	78 df       	rcall	.-272    	; 0x382 <transmit_data>
			break;
		case ROW7:
			transmit_data(0xFD);//Select Row
 492:	86 e0       	ldi	r24, 0x06	; 6
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	26 c0       	rjmp	.+76     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
			if(placedBlocks[6] != 0) {
 498:	8d ef       	ldi	r24, 0xFD	; 253
 49a:	73 df       	rcall	.-282    	; 0x382 <transmit_data>
 49c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <placedBlocks+0xc>
 4a0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <placedBlocks+0xd>
				transmit_data(placedBlocks[6]);
 4a4:	00 97       	sbiw	r24, 0x00	; 0
			}
			else {
				transmit_data(currentBlocks[6]);
			}
			state = ROW8;
 4a6:	21 f0       	breq	.+8      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4a8:	6c df       	rcall	.-296    	; 0x382 <transmit_data>
			transmit_data(0xFD);//Select Row
			if(placedBlocks[6] != 0) {
				transmit_data(placedBlocks[6]);
			}
			else {
				transmit_data(currentBlocks[6]);
 4aa:	87 e0       	ldi	r24, 0x07	; 7
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	1a c0       	rjmp	.+52     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4b0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_start+0xc>
			}
			state = ROW8;
 4b4:	66 df       	rcall	.-308    	; 0x382 <transmit_data>
 4b6:	87 e0       	ldi	r24, 0x07	; 7
			break;
		case ROW8:
			transmit_data(0xFE);//Select Row
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	14 c0       	rjmp	.+40     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4bc:	8e ef       	ldi	r24, 0xFE	; 254
			if(placedBlocks[7] != 0) {
 4be:	61 df       	rcall	.-318    	; 0x382 <transmit_data>
 4c0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <placedBlocks+0xe>
 4c4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <placedBlocks+0xf>
 4c8:	00 97       	sbiw	r24, 0x00	; 0
				transmit_data(placedBlocks[7]);
 4ca:	21 f0       	breq	.+8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4cc:	5a df       	rcall	.-332    	; 0x382 <transmit_data>
			}
			else {
				transmit_data(currentBlocks[7]);
			}
			state = ROW1;
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	08 c0       	rjmp	.+16     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
			transmit_data(0xFE);//Select Row
			if(placedBlocks[7] != 0) {
				transmit_data(placedBlocks[7]);
			}
			else {
				transmit_data(currentBlocks[7]);
 4d4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_start+0xe>
 4d8:	54 df       	rcall	.-344    	; 0x382 <transmit_data>
 4da:	80 e0       	ldi	r24, 0x00	; 0
			}
			state = ROW1;
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e0:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			state = ROW1;
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	df 91       	pop	r29
			break;
	}
	return state;
}
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <main>:
 4ea:	cf 93       	push	r28

int main(void)
{
 4ec:	df 93       	push	r29
 4ee:	00 d0       	rcall	.+0      	; 0x4f0 <main+0x6>
 4f0:	00 d0       	rcall	.+0      	; 0x4f2 <main+0x8>
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0xFF; PORTA = 0x00; //LCD Control Lines
 4f6:	8f ef       	ldi	r24, 0xFF	; 255
 4f8:	81 b9       	out	0x01, r24	; 1
 4fa:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00; //Shift Register
 4fc:	84 b9       	out	0x04, r24	; 4
 4fe:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x00; PORTC = 0xFF; //INPUTS
 500:	17 b8       	out	0x07, r1	; 7
 502:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF; PORTD = 0x00; //LCD Data Lines
 504:	8a b9       	out	0x0a, r24	; 10
 506:	1b b8       	out	0x0b, r1	; 11
	
	
	//Array of Tasks
	static task task1;
	static task task2;
	task *tasks[] = { &task1, &task2 };
 508:	a7 e3       	ldi	r26, 0x37	; 55
 50a:	b1 e0       	ldi	r27, 0x01	; 1
 50c:	ba 83       	std	Y+2, r27	; 0x02
 50e:	a9 83       	std	Y+1, r26	; 0x01
 510:	ec e2       	ldi	r30, 0x2C	; 44
 512:	f1 e0       	ldi	r31, 0x01	; 1
 514:	fc 83       	std	Y+4, r31	; 0x04
 516:	eb 83       	std	Y+3, r30	; 0x03
	const us numTasks = sizeof(tasks)/sizeof(task*);
	
	//Task 1
	task1.state = -1; //Init
 518:	8c 93       	st	X, r24
	task1.period = SMTick1_period;
 51a:	44 e1       	ldi	r20, 0x14	; 20
 51c:	50 e0       	ldi	r21, 0x00	; 0
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	11 96       	adiw	r26, 0x01	; 1
 524:	4d 93       	st	X+, r20
 526:	5d 93       	st	X+, r21
 528:	6d 93       	st	X+, r22
 52a:	7c 93       	st	X, r23
 52c:	14 97       	sbiw	r26, 0x04	; 4
	task1.elapsedTime = SMTick1_period;
 52e:	15 96       	adiw	r26, 0x05	; 5
 530:	4d 93       	st	X+, r20
 532:	5d 93       	st	X+, r21
 534:	6d 93       	st	X+, r22
 536:	7c 93       	st	X, r23
 538:	18 97       	sbiw	r26, 0x08	; 8
	task1.TickFct = &SMTick1;
 53a:	28 e4       	ldi	r18, 0x48	; 72
 53c:	31 e0       	ldi	r19, 0x01	; 1
 53e:	1a 96       	adiw	r26, 0x0a	; 10
 540:	3c 93       	st	X, r19
 542:	2e 93       	st	-X, r18
 544:	19 97       	sbiw	r26, 0x09	; 9
	
	//Task 2
	task2.state = -1; //Init
 546:	80 83       	st	Z, r24
	task2.period = SMTick2_period;
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	a0 e0       	ldi	r26, 0x00	; 0
 54e:	b0 e0       	ldi	r27, 0x00	; 0
 550:	81 83       	std	Z+1, r24	; 0x01
 552:	92 83       	std	Z+2, r25	; 0x02
 554:	a3 83       	std	Z+3, r26	; 0x03
 556:	b4 83       	std	Z+4, r27	; 0x04
	task2.elapsedTime = SMTick2_period;
 558:	85 83       	std	Z+5, r24	; 0x05
 55a:	96 83       	std	Z+6, r25	; 0x06
 55c:	a7 83       	std	Z+7, r26	; 0x07
 55e:	b0 87       	std	Z+8, r27	; 0x08
	task2.TickFct = &SMTick2;
 560:	83 ed       	ldi	r24, 0xD3	; 211
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	92 87       	std	Z+10, r25	; 0x0a
 566:	81 87       	std	Z+9, r24	; 0x09
	
	PWM_on();
 568:	01 df       	rcall	.-510    	; 0x36c <PWM_on>
	TimerSet(GCD);
 56a:	6a e0       	ldi	r22, 0x0A	; 10
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 572:	b2 dd       	rcall	.-1180   	; 0xd8 <TimerSet>
 574:	c2 dd       	rcall	.-1148   	; 0xfa <TimerOn>
	
	//uc C0 = 0x00;
	//uc C1 = 0x00;
	//uc C2 = 0x00;
	
	clear_data();
 576:	12 df       	rcall	.-476    	; 0x39c <clear_data>
 578:	7e 01       	movw	r14, r28
 57a:	85 e0       	ldi	r24, 0x05	; 5
 57c:	e8 0e       	add	r14, r24
 57e:	f1 1c       	adc	r15, r1
 580:	de 01       	movw	r26, r28
 582:	11 96       	adiw	r26, 0x01	; 1
 584:	6d 01       	movw	r12, r26
 586:	f6 01       	movw	r30, r12
    {
		
		//Scheduler code
		for (i = 0; i < numTasks; i++) {
			//Task ready to tick
			if (tasks[i]->elapsedTime >= tasks[i]->period) {
 588:	01 91       	ld	r16, Z+
 58a:	11 91       	ld	r17, Z+
 58c:	6f 01       	movw	r12, r30
 58e:	d8 01       	movw	r26, r16
 590:	15 96       	adiw	r26, 0x05	; 5
 592:	4d 91       	ld	r20, X+
 594:	5d 91       	ld	r21, X+
 596:	6d 91       	ld	r22, X+
 598:	7c 91       	ld	r23, X
 59a:	18 97       	sbiw	r26, 0x08	; 8
 59c:	11 96       	adiw	r26, 0x01	; 1
 59e:	8d 91       	ld	r24, X+
 5a0:	9d 91       	ld	r25, X+
 5a2:	0d 90       	ld	r0, X+
 5a4:	bc 91       	ld	r27, X
 5a6:	a0 2d       	mov	r26, r0
 5a8:	48 17       	cp	r20, r24
 5aa:	59 07       	cpc	r21, r25
 5ac:	6a 07       	cpc	r22, r26
 5ae:	7b 07       	cpc	r23, r27
 5b0:	80 f0       	brcs	.+32     	; 0x5d2 <main+0xe8>
 5b2:	f8 01       	movw	r30, r16
				//Setup next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 5b4:	80 81       	ld	r24, Z
 5b6:	01 84       	ldd	r0, Z+9	; 0x09
 5b8:	f2 85       	ldd	r31, Z+10	; 0x0a
 5ba:	e0 2d       	mov	r30, r0
 5bc:	08 2e       	mov	r0, r24
 5be:	00 0c       	add	r0, r0
 5c0:	99 0b       	sbc	r25, r25
 5c2:	09 95       	icall
 5c4:	d8 01       	movw	r26, r16
 5c6:	8c 93       	st	X, r24
 5c8:	f8 01       	movw	r30, r16
				//Reset elapsed time for next tick
				tasks[i]->elapsedTime = 0;
 5ca:	15 82       	std	Z+5, r1	; 0x05
 5cc:	16 82       	std	Z+6, r1	; 0x06
 5ce:	17 82       	std	Z+7, r1	; 0x07
 5d0:	10 86       	std	Z+8, r1	; 0x08
 5d2:	f8 01       	movw	r30, r16
			}
			tasks[i]->elapsedTime +=1;
 5d4:	85 81       	ldd	r24, Z+5	; 0x05
 5d6:	96 81       	ldd	r25, Z+6	; 0x06
 5d8:	a7 81       	ldd	r26, Z+7	; 0x07
 5da:	b0 85       	ldd	r27, Z+8	; 0x08
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	a1 1d       	adc	r26, r1
 5e0:	b1 1d       	adc	r27, r1
 5e2:	85 83       	std	Z+5, r24	; 0x05
 5e4:	96 83       	std	Z+6, r25	; 0x06
 5e6:	a7 83       	std	Z+7, r26	; 0x07
 5e8:	b0 87       	std	Z+8, r27	; 0x08
 5ea:	ce 14       	cp	r12, r14
	us i; //Loop iterator
    while (1) 
    {
		
		//Scheduler code
		for (i = 0; i < numTasks; i++) {
 5ec:	df 04       	cpc	r13, r15
 5ee:	59 f6       	brne	.-106    	; 0x586 <main+0x9c>
 5f0:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <TimerFlag>
				//Reset elapsed time for next tick
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime +=1;
		}
		while(!TimerFlag);
 5f4:	88 23       	and	r24, r24
 5f6:	e1 f3       	breq	.-8      	; 0x5f0 <main+0x106>
 5f8:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <TimerFlag>
		TimerFlag = 0;
 5fc:	c1 cf       	rjmp	.-126    	; 0x580 <main+0x96>

000005fe <__cmpsf2>:
	}
 5fe:	d9 d0       	rcall	.+434    	; 0x7b2 <__fp_cmp>
 600:	08 f4       	brcc	.+2      	; 0x604 <__cmpsf2+0x6>
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	08 95       	ret

00000606 <__divsf3>:
 606:	0c d0       	rcall	.+24     	; 0x620 <__divsf3x>
 608:	0f c1       	rjmp	.+542    	; 0x828 <__fp_round>
 60a:	07 d1       	rcall	.+526    	; 0x81a <__fp_pscB>
 60c:	40 f0       	brcs	.+16     	; 0x61e <__divsf3+0x18>
 60e:	fe d0       	rcall	.+508    	; 0x80c <__fp_pscA>
 610:	30 f0       	brcs	.+12     	; 0x61e <__divsf3+0x18>
 612:	21 f4       	brne	.+8      	; 0x61c <__divsf3+0x16>
 614:	5f 3f       	cpi	r21, 0xFF	; 255
 616:	19 f0       	breq	.+6      	; 0x61e <__divsf3+0x18>
 618:	f0 c0       	rjmp	.+480    	; 0x7fa <__fp_inf>
 61a:	51 11       	cpse	r21, r1
 61c:	39 c1       	rjmp	.+626    	; 0x890 <__fp_szero>
 61e:	f3 c0       	rjmp	.+486    	; 0x806 <__fp_nan>

00000620 <__divsf3x>:
 620:	14 d1       	rcall	.+552    	; 0x84a <__fp_split3>
 622:	98 f3       	brcs	.-26     	; 0x60a <__divsf3+0x4>

00000624 <__divsf3_pse>:
 624:	99 23       	and	r25, r25
 626:	c9 f3       	breq	.-14     	; 0x61a <__divsf3+0x14>
 628:	55 23       	and	r21, r21
 62a:	b1 f3       	breq	.-20     	; 0x618 <__divsf3+0x12>
 62c:	95 1b       	sub	r25, r21
 62e:	55 0b       	sbc	r21, r21
 630:	bb 27       	eor	r27, r27
 632:	aa 27       	eor	r26, r26
 634:	62 17       	cp	r22, r18
 636:	73 07       	cpc	r23, r19
 638:	84 07       	cpc	r24, r20
 63a:	38 f0       	brcs	.+14     	; 0x64a <__divsf3_pse+0x26>
 63c:	9f 5f       	subi	r25, 0xFF	; 255
 63e:	5f 4f       	sbci	r21, 0xFF	; 255
 640:	22 0f       	add	r18, r18
 642:	33 1f       	adc	r19, r19
 644:	44 1f       	adc	r20, r20
 646:	aa 1f       	adc	r26, r26
 648:	a9 f3       	breq	.-22     	; 0x634 <__divsf3_pse+0x10>
 64a:	33 d0       	rcall	.+102    	; 0x6b2 <__divsf3_pse+0x8e>
 64c:	0e 2e       	mov	r0, r30
 64e:	3a f0       	brmi	.+14     	; 0x65e <__divsf3_pse+0x3a>
 650:	e0 e8       	ldi	r30, 0x80	; 128
 652:	30 d0       	rcall	.+96     	; 0x6b4 <__divsf3_pse+0x90>
 654:	91 50       	subi	r25, 0x01	; 1
 656:	50 40       	sbci	r21, 0x00	; 0
 658:	e6 95       	lsr	r30
 65a:	00 1c       	adc	r0, r0
 65c:	ca f7       	brpl	.-14     	; 0x650 <__divsf3_pse+0x2c>
 65e:	29 d0       	rcall	.+82     	; 0x6b2 <__divsf3_pse+0x8e>
 660:	fe 2f       	mov	r31, r30
 662:	27 d0       	rcall	.+78     	; 0x6b2 <__divsf3_pse+0x8e>
 664:	66 0f       	add	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	bb 1f       	adc	r27, r27
 66c:	26 17       	cp	r18, r22
 66e:	37 07       	cpc	r19, r23
 670:	48 07       	cpc	r20, r24
 672:	ab 07       	cpc	r26, r27
 674:	b0 e8       	ldi	r27, 0x80	; 128
 676:	09 f0       	breq	.+2      	; 0x67a <__divsf3_pse+0x56>
 678:	bb 0b       	sbc	r27, r27
 67a:	80 2d       	mov	r24, r0
 67c:	bf 01       	movw	r22, r30
 67e:	ff 27       	eor	r31, r31
 680:	93 58       	subi	r25, 0x83	; 131
 682:	5f 4f       	sbci	r21, 0xFF	; 255
 684:	2a f0       	brmi	.+10     	; 0x690 <__divsf3_pse+0x6c>
 686:	9e 3f       	cpi	r25, 0xFE	; 254
 688:	51 05       	cpc	r21, r1
 68a:	68 f0       	brcs	.+26     	; 0x6a6 <__divsf3_pse+0x82>
 68c:	b6 c0       	rjmp	.+364    	; 0x7fa <__fp_inf>
 68e:	00 c1       	rjmp	.+512    	; 0x890 <__fp_szero>
 690:	5f 3f       	cpi	r21, 0xFF	; 255
 692:	ec f3       	brlt	.-6      	; 0x68e <__divsf3_pse+0x6a>
 694:	98 3e       	cpi	r25, 0xE8	; 232
 696:	dc f3       	brlt	.-10     	; 0x68e <__divsf3_pse+0x6a>
 698:	86 95       	lsr	r24
 69a:	77 95       	ror	r23
 69c:	67 95       	ror	r22
 69e:	b7 95       	ror	r27
 6a0:	f7 95       	ror	r31
 6a2:	9f 5f       	subi	r25, 0xFF	; 255
 6a4:	c9 f7       	brne	.-14     	; 0x698 <__divsf3_pse+0x74>
 6a6:	88 0f       	add	r24, r24
 6a8:	91 1d       	adc	r25, r1
 6aa:	96 95       	lsr	r25
 6ac:	87 95       	ror	r24
 6ae:	97 f9       	bld	r25, 7
 6b0:	08 95       	ret
 6b2:	e1 e0       	ldi	r30, 0x01	; 1
 6b4:	66 0f       	add	r22, r22
 6b6:	77 1f       	adc	r23, r23
 6b8:	88 1f       	adc	r24, r24
 6ba:	bb 1f       	adc	r27, r27
 6bc:	62 17       	cp	r22, r18
 6be:	73 07       	cpc	r23, r19
 6c0:	84 07       	cpc	r24, r20
 6c2:	ba 07       	cpc	r27, r26
 6c4:	20 f0       	brcs	.+8      	; 0x6ce <__divsf3_pse+0xaa>
 6c6:	62 1b       	sub	r22, r18
 6c8:	73 0b       	sbc	r23, r19
 6ca:	84 0b       	sbc	r24, r20
 6cc:	ba 0b       	sbc	r27, r26
 6ce:	ee 1f       	adc	r30, r30
 6d0:	88 f7       	brcc	.-30     	; 0x6b4 <__divsf3_pse+0x90>
 6d2:	e0 95       	com	r30
 6d4:	08 95       	ret

000006d6 <__fixsfsi>:
 6d6:	04 d0       	rcall	.+8      	; 0x6e0 <__fixunssfsi>
 6d8:	68 94       	set
 6da:	b1 11       	cpse	r27, r1
 6dc:	d9 c0       	rjmp	.+434    	; 0x890 <__fp_szero>
 6de:	08 95       	ret

000006e0 <__fixunssfsi>:
 6e0:	bc d0       	rcall	.+376    	; 0x85a <__fp_splitA>
 6e2:	88 f0       	brcs	.+34     	; 0x706 <__fixunssfsi+0x26>
 6e4:	9f 57       	subi	r25, 0x7F	; 127
 6e6:	90 f0       	brcs	.+36     	; 0x70c <__fixunssfsi+0x2c>
 6e8:	b9 2f       	mov	r27, r25
 6ea:	99 27       	eor	r25, r25
 6ec:	b7 51       	subi	r27, 0x17	; 23
 6ee:	a0 f0       	brcs	.+40     	; 0x718 <__fixunssfsi+0x38>
 6f0:	d1 f0       	breq	.+52     	; 0x726 <__fixunssfsi+0x46>
 6f2:	66 0f       	add	r22, r22
 6f4:	77 1f       	adc	r23, r23
 6f6:	88 1f       	adc	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	1a f0       	brmi	.+6      	; 0x702 <__fixunssfsi+0x22>
 6fc:	ba 95       	dec	r27
 6fe:	c9 f7       	brne	.-14     	; 0x6f2 <__fixunssfsi+0x12>
 700:	12 c0       	rjmp	.+36     	; 0x726 <__fixunssfsi+0x46>
 702:	b1 30       	cpi	r27, 0x01	; 1
 704:	81 f0       	breq	.+32     	; 0x726 <__fixunssfsi+0x46>
 706:	c3 d0       	rcall	.+390    	; 0x88e <__fp_zero>
 708:	b1 e0       	ldi	r27, 0x01	; 1
 70a:	08 95       	ret
 70c:	c0 c0       	rjmp	.+384    	; 0x88e <__fp_zero>
 70e:	67 2f       	mov	r22, r23
 710:	78 2f       	mov	r23, r24
 712:	88 27       	eor	r24, r24
 714:	b8 5f       	subi	r27, 0xF8	; 248
 716:	39 f0       	breq	.+14     	; 0x726 <__fixunssfsi+0x46>
 718:	b9 3f       	cpi	r27, 0xF9	; 249
 71a:	cc f3       	brlt	.-14     	; 0x70e <__fixunssfsi+0x2e>
 71c:	86 95       	lsr	r24
 71e:	77 95       	ror	r23
 720:	67 95       	ror	r22
 722:	b3 95       	inc	r27
 724:	d9 f7       	brne	.-10     	; 0x71c <__fixunssfsi+0x3c>
 726:	3e f4       	brtc	.+14     	; 0x736 <__fixunssfsi+0x56>
 728:	90 95       	com	r25
 72a:	80 95       	com	r24
 72c:	70 95       	com	r23
 72e:	61 95       	neg	r22
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	8f 4f       	sbci	r24, 0xFF	; 255
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	08 95       	ret

00000738 <__floatunsisf>:
 738:	e8 94       	clt
 73a:	09 c0       	rjmp	.+18     	; 0x74e <__floatsisf+0x12>

0000073c <__floatsisf>:
 73c:	97 fb       	bst	r25, 7
 73e:	3e f4       	brtc	.+14     	; 0x74e <__floatsisf+0x12>
 740:	90 95       	com	r25
 742:	80 95       	com	r24
 744:	70 95       	com	r23
 746:	61 95       	neg	r22
 748:	7f 4f       	sbci	r23, 0xFF	; 255
 74a:	8f 4f       	sbci	r24, 0xFF	; 255
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	99 23       	and	r25, r25
 750:	a9 f0       	breq	.+42     	; 0x77c <__floatsisf+0x40>
 752:	f9 2f       	mov	r31, r25
 754:	96 e9       	ldi	r25, 0x96	; 150
 756:	bb 27       	eor	r27, r27
 758:	93 95       	inc	r25
 75a:	f6 95       	lsr	r31
 75c:	87 95       	ror	r24
 75e:	77 95       	ror	r23
 760:	67 95       	ror	r22
 762:	b7 95       	ror	r27
 764:	f1 11       	cpse	r31, r1
 766:	f8 cf       	rjmp	.-16     	; 0x758 <__floatsisf+0x1c>
 768:	fa f4       	brpl	.+62     	; 0x7a8 <__floatsisf+0x6c>
 76a:	bb 0f       	add	r27, r27
 76c:	11 f4       	brne	.+4      	; 0x772 <__floatsisf+0x36>
 76e:	60 ff       	sbrs	r22, 0
 770:	1b c0       	rjmp	.+54     	; 0x7a8 <__floatsisf+0x6c>
 772:	6f 5f       	subi	r22, 0xFF	; 255
 774:	7f 4f       	sbci	r23, 0xFF	; 255
 776:	8f 4f       	sbci	r24, 0xFF	; 255
 778:	9f 4f       	sbci	r25, 0xFF	; 255
 77a:	16 c0       	rjmp	.+44     	; 0x7a8 <__floatsisf+0x6c>
 77c:	88 23       	and	r24, r24
 77e:	11 f0       	breq	.+4      	; 0x784 <__floatsisf+0x48>
 780:	96 e9       	ldi	r25, 0x96	; 150
 782:	11 c0       	rjmp	.+34     	; 0x7a6 <__floatsisf+0x6a>
 784:	77 23       	and	r23, r23
 786:	21 f0       	breq	.+8      	; 0x790 <__floatsisf+0x54>
 788:	9e e8       	ldi	r25, 0x8E	; 142
 78a:	87 2f       	mov	r24, r23
 78c:	76 2f       	mov	r23, r22
 78e:	05 c0       	rjmp	.+10     	; 0x79a <__floatsisf+0x5e>
 790:	66 23       	and	r22, r22
 792:	71 f0       	breq	.+28     	; 0x7b0 <__floatsisf+0x74>
 794:	96 e8       	ldi	r25, 0x86	; 134
 796:	86 2f       	mov	r24, r22
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	60 e0       	ldi	r22, 0x00	; 0
 79c:	2a f0       	brmi	.+10     	; 0x7a8 <__floatsisf+0x6c>
 79e:	9a 95       	dec	r25
 7a0:	66 0f       	add	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	da f7       	brpl	.-10     	; 0x79e <__floatsisf+0x62>
 7a8:	88 0f       	add	r24, r24
 7aa:	96 95       	lsr	r25
 7ac:	87 95       	ror	r24
 7ae:	97 f9       	bld	r25, 7
 7b0:	08 95       	ret

000007b2 <__fp_cmp>:
 7b2:	99 0f       	add	r25, r25
 7b4:	00 08       	sbc	r0, r0
 7b6:	55 0f       	add	r21, r21
 7b8:	aa 0b       	sbc	r26, r26
 7ba:	e0 e8       	ldi	r30, 0x80	; 128
 7bc:	fe ef       	ldi	r31, 0xFE	; 254
 7be:	16 16       	cp	r1, r22
 7c0:	17 06       	cpc	r1, r23
 7c2:	e8 07       	cpc	r30, r24
 7c4:	f9 07       	cpc	r31, r25
 7c6:	c0 f0       	brcs	.+48     	; 0x7f8 <__fp_cmp+0x46>
 7c8:	12 16       	cp	r1, r18
 7ca:	13 06       	cpc	r1, r19
 7cc:	e4 07       	cpc	r30, r20
 7ce:	f5 07       	cpc	r31, r21
 7d0:	98 f0       	brcs	.+38     	; 0x7f8 <__fp_cmp+0x46>
 7d2:	62 1b       	sub	r22, r18
 7d4:	73 0b       	sbc	r23, r19
 7d6:	84 0b       	sbc	r24, r20
 7d8:	95 0b       	sbc	r25, r21
 7da:	39 f4       	brne	.+14     	; 0x7ea <__fp_cmp+0x38>
 7dc:	0a 26       	eor	r0, r26
 7de:	61 f0       	breq	.+24     	; 0x7f8 <__fp_cmp+0x46>
 7e0:	23 2b       	or	r18, r19
 7e2:	24 2b       	or	r18, r20
 7e4:	25 2b       	or	r18, r21
 7e6:	21 f4       	brne	.+8      	; 0x7f0 <__fp_cmp+0x3e>
 7e8:	08 95       	ret
 7ea:	0a 26       	eor	r0, r26
 7ec:	09 f4       	brne	.+2      	; 0x7f0 <__fp_cmp+0x3e>
 7ee:	a1 40       	sbci	r26, 0x01	; 1
 7f0:	a6 95       	lsr	r26
 7f2:	8f ef       	ldi	r24, 0xFF	; 255
 7f4:	81 1d       	adc	r24, r1
 7f6:	81 1d       	adc	r24, r1
 7f8:	08 95       	ret

000007fa <__fp_inf>:
 7fa:	97 f9       	bld	r25, 7
 7fc:	9f 67       	ori	r25, 0x7F	; 127
 7fe:	80 e8       	ldi	r24, 0x80	; 128
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	60 e0       	ldi	r22, 0x00	; 0
 804:	08 95       	ret

00000806 <__fp_nan>:
 806:	9f ef       	ldi	r25, 0xFF	; 255
 808:	80 ec       	ldi	r24, 0xC0	; 192
 80a:	08 95       	ret

0000080c <__fp_pscA>:
 80c:	00 24       	eor	r0, r0
 80e:	0a 94       	dec	r0
 810:	16 16       	cp	r1, r22
 812:	17 06       	cpc	r1, r23
 814:	18 06       	cpc	r1, r24
 816:	09 06       	cpc	r0, r25
 818:	08 95       	ret

0000081a <__fp_pscB>:
 81a:	00 24       	eor	r0, r0
 81c:	0a 94       	dec	r0
 81e:	12 16       	cp	r1, r18
 820:	13 06       	cpc	r1, r19
 822:	14 06       	cpc	r1, r20
 824:	05 06       	cpc	r0, r21
 826:	08 95       	ret

00000828 <__fp_round>:
 828:	09 2e       	mov	r0, r25
 82a:	03 94       	inc	r0
 82c:	00 0c       	add	r0, r0
 82e:	11 f4       	brne	.+4      	; 0x834 <__fp_round+0xc>
 830:	88 23       	and	r24, r24
 832:	52 f0       	brmi	.+20     	; 0x848 <__fp_round+0x20>
 834:	bb 0f       	add	r27, r27
 836:	40 f4       	brcc	.+16     	; 0x848 <__fp_round+0x20>
 838:	bf 2b       	or	r27, r31
 83a:	11 f4       	brne	.+4      	; 0x840 <__fp_round+0x18>
 83c:	60 ff       	sbrs	r22, 0
 83e:	04 c0       	rjmp	.+8      	; 0x848 <__fp_round+0x20>
 840:	6f 5f       	subi	r22, 0xFF	; 255
 842:	7f 4f       	sbci	r23, 0xFF	; 255
 844:	8f 4f       	sbci	r24, 0xFF	; 255
 846:	9f 4f       	sbci	r25, 0xFF	; 255
 848:	08 95       	ret

0000084a <__fp_split3>:
 84a:	57 fd       	sbrc	r21, 7
 84c:	90 58       	subi	r25, 0x80	; 128
 84e:	44 0f       	add	r20, r20
 850:	55 1f       	adc	r21, r21
 852:	59 f0       	breq	.+22     	; 0x86a <__fp_splitA+0x10>
 854:	5f 3f       	cpi	r21, 0xFF	; 255
 856:	71 f0       	breq	.+28     	; 0x874 <__fp_splitA+0x1a>
 858:	47 95       	ror	r20

0000085a <__fp_splitA>:
 85a:	88 0f       	add	r24, r24
 85c:	97 fb       	bst	r25, 7
 85e:	99 1f       	adc	r25, r25
 860:	61 f0       	breq	.+24     	; 0x87a <__fp_splitA+0x20>
 862:	9f 3f       	cpi	r25, 0xFF	; 255
 864:	79 f0       	breq	.+30     	; 0x884 <__fp_splitA+0x2a>
 866:	87 95       	ror	r24
 868:	08 95       	ret
 86a:	12 16       	cp	r1, r18
 86c:	13 06       	cpc	r1, r19
 86e:	14 06       	cpc	r1, r20
 870:	55 1f       	adc	r21, r21
 872:	f2 cf       	rjmp	.-28     	; 0x858 <__fp_split3+0xe>
 874:	46 95       	lsr	r20
 876:	f1 df       	rcall	.-30     	; 0x85a <__fp_splitA>
 878:	08 c0       	rjmp	.+16     	; 0x88a <__fp_splitA+0x30>
 87a:	16 16       	cp	r1, r22
 87c:	17 06       	cpc	r1, r23
 87e:	18 06       	cpc	r1, r24
 880:	99 1f       	adc	r25, r25
 882:	f1 cf       	rjmp	.-30     	; 0x866 <__fp_splitA+0xc>
 884:	86 95       	lsr	r24
 886:	71 05       	cpc	r23, r1
 888:	61 05       	cpc	r22, r1
 88a:	08 94       	sec
 88c:	08 95       	ret

0000088e <__fp_zero>:
 88e:	e8 94       	clt

00000890 <__fp_szero>:
 890:	bb 27       	eor	r27, r27
 892:	66 27       	eor	r22, r22
 894:	77 27       	eor	r23, r23
 896:	cb 01       	movw	r24, r22
 898:	97 f9       	bld	r25, 7
 89a:	08 95       	ret

0000089c <__gesf2>:
 89c:	8a df       	rcall	.-236    	; 0x7b2 <__fp_cmp>
 89e:	08 f4       	brcc	.+2      	; 0x8a2 <__gesf2+0x6>
 8a0:	8f ef       	ldi	r24, 0xFF	; 255
 8a2:	08 95       	ret

000008a4 <__mulsf3>:
 8a4:	0b d0       	rcall	.+22     	; 0x8bc <__mulsf3x>
 8a6:	c0 cf       	rjmp	.-128    	; 0x828 <__fp_round>
 8a8:	b1 df       	rcall	.-158    	; 0x80c <__fp_pscA>
 8aa:	28 f0       	brcs	.+10     	; 0x8b6 <__mulsf3+0x12>
 8ac:	b6 df       	rcall	.-148    	; 0x81a <__fp_pscB>
 8ae:	18 f0       	brcs	.+6      	; 0x8b6 <__mulsf3+0x12>
 8b0:	95 23       	and	r25, r21
 8b2:	09 f0       	breq	.+2      	; 0x8b6 <__mulsf3+0x12>
 8b4:	a2 cf       	rjmp	.-188    	; 0x7fa <__fp_inf>
 8b6:	a7 cf       	rjmp	.-178    	; 0x806 <__fp_nan>
 8b8:	11 24       	eor	r1, r1
 8ba:	ea cf       	rjmp	.-44     	; 0x890 <__fp_szero>

000008bc <__mulsf3x>:
 8bc:	c6 df       	rcall	.-116    	; 0x84a <__fp_split3>
 8be:	a0 f3       	brcs	.-24     	; 0x8a8 <__mulsf3+0x4>

000008c0 <__mulsf3_pse>:
 8c0:	95 9f       	mul	r25, r21
 8c2:	d1 f3       	breq	.-12     	; 0x8b8 <__mulsf3+0x14>
 8c4:	95 0f       	add	r25, r21
 8c6:	50 e0       	ldi	r21, 0x00	; 0
 8c8:	55 1f       	adc	r21, r21
 8ca:	62 9f       	mul	r22, r18
 8cc:	f0 01       	movw	r30, r0
 8ce:	72 9f       	mul	r23, r18
 8d0:	bb 27       	eor	r27, r27
 8d2:	f0 0d       	add	r31, r0
 8d4:	b1 1d       	adc	r27, r1
 8d6:	63 9f       	mul	r22, r19
 8d8:	aa 27       	eor	r26, r26
 8da:	f0 0d       	add	r31, r0
 8dc:	b1 1d       	adc	r27, r1
 8de:	aa 1f       	adc	r26, r26
 8e0:	64 9f       	mul	r22, r20
 8e2:	66 27       	eor	r22, r22
 8e4:	b0 0d       	add	r27, r0
 8e6:	a1 1d       	adc	r26, r1
 8e8:	66 1f       	adc	r22, r22
 8ea:	82 9f       	mul	r24, r18
 8ec:	22 27       	eor	r18, r18
 8ee:	b0 0d       	add	r27, r0
 8f0:	a1 1d       	adc	r26, r1
 8f2:	62 1f       	adc	r22, r18
 8f4:	73 9f       	mul	r23, r19
 8f6:	b0 0d       	add	r27, r0
 8f8:	a1 1d       	adc	r26, r1
 8fa:	62 1f       	adc	r22, r18
 8fc:	83 9f       	mul	r24, r19
 8fe:	a0 0d       	add	r26, r0
 900:	61 1d       	adc	r22, r1
 902:	22 1f       	adc	r18, r18
 904:	74 9f       	mul	r23, r20
 906:	33 27       	eor	r19, r19
 908:	a0 0d       	add	r26, r0
 90a:	61 1d       	adc	r22, r1
 90c:	23 1f       	adc	r18, r19
 90e:	84 9f       	mul	r24, r20
 910:	60 0d       	add	r22, r0
 912:	21 1d       	adc	r18, r1
 914:	82 2f       	mov	r24, r18
 916:	76 2f       	mov	r23, r22
 918:	6a 2f       	mov	r22, r26
 91a:	11 24       	eor	r1, r1
 91c:	9f 57       	subi	r25, 0x7F	; 127
 91e:	50 40       	sbci	r21, 0x00	; 0
 920:	8a f0       	brmi	.+34     	; 0x944 <__mulsf3_pse+0x84>
 922:	e1 f0       	breq	.+56     	; 0x95c <__mulsf3_pse+0x9c>
 924:	88 23       	and	r24, r24
 926:	4a f0       	brmi	.+18     	; 0x93a <__mulsf3_pse+0x7a>
 928:	ee 0f       	add	r30, r30
 92a:	ff 1f       	adc	r31, r31
 92c:	bb 1f       	adc	r27, r27
 92e:	66 1f       	adc	r22, r22
 930:	77 1f       	adc	r23, r23
 932:	88 1f       	adc	r24, r24
 934:	91 50       	subi	r25, 0x01	; 1
 936:	50 40       	sbci	r21, 0x00	; 0
 938:	a9 f7       	brne	.-22     	; 0x924 <__mulsf3_pse+0x64>
 93a:	9e 3f       	cpi	r25, 0xFE	; 254
 93c:	51 05       	cpc	r21, r1
 93e:	70 f0       	brcs	.+28     	; 0x95c <__mulsf3_pse+0x9c>
 940:	5c cf       	rjmp	.-328    	; 0x7fa <__fp_inf>
 942:	a6 cf       	rjmp	.-180    	; 0x890 <__fp_szero>
 944:	5f 3f       	cpi	r21, 0xFF	; 255
 946:	ec f3       	brlt	.-6      	; 0x942 <__mulsf3_pse+0x82>
 948:	98 3e       	cpi	r25, 0xE8	; 232
 94a:	dc f3       	brlt	.-10     	; 0x942 <__mulsf3_pse+0x82>
 94c:	86 95       	lsr	r24
 94e:	77 95       	ror	r23
 950:	67 95       	ror	r22
 952:	b7 95       	ror	r27
 954:	f7 95       	ror	r31
 956:	e7 95       	ror	r30
 958:	9f 5f       	subi	r25, 0xFF	; 255
 95a:	c1 f7       	brne	.-16     	; 0x94c <__mulsf3_pse+0x8c>
 95c:	fe 2b       	or	r31, r30
 95e:	88 0f       	add	r24, r24
 960:	91 1d       	adc	r25, r1
 962:	96 95       	lsr	r25
 964:	87 95       	ror	r24
 966:	97 f9       	bld	r25, 7
 968:	08 95       	ret

0000096a <__tablejump2__>:
 96a:	ee 0f       	add	r30, r30
 96c:	ff 1f       	adc	r31, r31
 96e:	00 24       	eor	r0, r0
 970:	00 1c       	adc	r0, r0
 972:	0b be       	out	0x3b, r0	; 59
 974:	07 90       	elpm	r0, Z+
 976:	f6 91       	elpm	r31, Z
 978:	e0 2d       	mov	r30, r0
 97a:	09 94       	ijmp

0000097c <_exit>:
 97c:	f8 94       	cli

0000097e <__stop_program>:
 97e:	ff cf       	rjmp	.-2      	; 0x97e <__stop_program>
