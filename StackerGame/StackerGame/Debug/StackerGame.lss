
StackerGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000e2a  00000ebe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  00800138  00800138  00000ef6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ef6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016b3  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac4  00000000  00000000  0000271b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c72  00000000  00000000  000031df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00003e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b8  00000000  00000000  000040dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ddc  00000000  00000000  00004894  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005670  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
   2:	00 00       	nop
   4:	6f c0       	rjmp	.+222    	; 0xe4 <__bad_interrupt>
   6:	00 00       	nop
   8:	6d c0       	rjmp	.+218    	; 0xe4 <__bad_interrupt>
   a:	00 00       	nop
   c:	6b c0       	rjmp	.+214    	; 0xe4 <__bad_interrupt>
   e:	00 00       	nop
  10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
  12:	00 00       	nop
  14:	67 c0       	rjmp	.+206    	; 0xe4 <__bad_interrupt>
  16:	00 00       	nop
  18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
  22:	00 00       	nop
  24:	5f c0       	rjmp	.+190    	; 0xe4 <__bad_interrupt>
  26:	00 00       	nop
  28:	5d c0       	rjmp	.+186    	; 0xe4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5b c0       	rjmp	.+182    	; 0xe4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	59 c0       	rjmp	.+178    	; 0xe4 <__bad_interrupt>
  32:	00 00       	nop
  34:	e5 c0       	rjmp	.+458    	; 0x200 <__vector_13>
  36:	00 00       	nop
  38:	55 c0       	rjmp	.+170    	; 0xe4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	53 c0       	rjmp	.+166    	; 0xe4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	51 c0       	rjmp	.+162    	; 0xe4 <__bad_interrupt>
  42:	00 00       	nop
  44:	4f c0       	rjmp	.+158    	; 0xe4 <__bad_interrupt>
  46:	00 00       	nop
  48:	4d c0       	rjmp	.+154    	; 0xe4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4b c0       	rjmp	.+150    	; 0xe4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	49 c0       	rjmp	.+146    	; 0xe4 <__bad_interrupt>
  52:	00 00       	nop
  54:	47 c0       	rjmp	.+142    	; 0xe4 <__bad_interrupt>
  56:	00 00       	nop
  58:	45 c0       	rjmp	.+138    	; 0xe4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	43 c0       	rjmp	.+134    	; 0xe4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	41 c0       	rjmp	.+130    	; 0xe4 <__bad_interrupt>
  62:	00 00       	nop
  64:	3f c0       	rjmp	.+126    	; 0xe4 <__bad_interrupt>
  66:	00 00       	nop
  68:	3d c0       	rjmp	.+122    	; 0xe4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3b c0       	rjmp	.+118    	; 0xe4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	39 c0       	rjmp	.+114    	; 0xe4 <__bad_interrupt>
  72:	00 00       	nop
  74:	37 c0       	rjmp	.+110    	; 0xe4 <__bad_interrupt>
  76:	00 00       	nop
  78:	35 c0       	rjmp	.+106    	; 0xe4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	33 c0       	rjmp	.+102    	; 0xe4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	31 c0       	rjmp	.+98     	; 0xe4 <__bad_interrupt>
  82:	00 00       	nop
  84:	2f c0       	rjmp	.+94     	; 0xe4 <__bad_interrupt>
  86:	00 00       	nop
  88:	2d c0       	rjmp	.+90     	; 0xe4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6b 02       	muls	r22, r27
  8e:	7b 02       	muls	r23, r27
  90:	8b 02       	muls	r24, r27
  92:	9b 02       	muls	r25, r27
  94:	ab 02       	muls	r26, r27
  96:	bb 02       	muls	r27, r27
  98:	cb 02       	muls	r28, r27
  9a:	db 02       	muls	r29, r27
  9c:	3f 03       	fmul	r19, r23
  9e:	66 03       	mulsu	r22, r22
  a0:	b1 03       	fmuls	r19, r17
  a2:	6c 03       	fmul	r22, r20
  a4:	75 03       	mulsu	r23, r21
  a6:	82 03       	fmuls	r16, r18
  a8:	82 03       	fmuls	r16, r18

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e4       	ldi	r29, 0x40	; 64
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	11 e0       	ldi	r17, 0x01	; 1
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	ea e2       	ldi	r30, 0x2A	; 42
  be:	fe e0       	ldi	r31, 0x0E	; 14
  c0:	00 e0       	ldi	r16, 0x00	; 0
  c2:	0b bf       	out	0x3b, r16	; 59
  c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a8 33       	cpi	r26, 0x38	; 56
  cc:	b1 07       	cpc	r27, r17
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	a8 e3       	ldi	r26, 0x38	; 56
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
  d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
  da:	a9 37       	cpi	r26, 0x79	; 121
  dc:	b2 07       	cpc	r27, r18
  de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
  e0:	25 d4       	rcall	.+2122   	; 0x92c <main>
  e2:	a1 c6       	rjmp	.+3394   	; 0xe26 <_exit>

000000e4 <__bad_interrupt>:
  e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <delay_ms>:
    set_PWM(0);
}

void PWM_off() {
    TCCR3A = 0x00;
    TCCR3B = 0x00;
  e6:	18 16       	cp	r1, r24
  e8:	19 06       	cpc	r1, r25
  ea:	5c f0       	brlt	.+22     	; 0x102 <delay_ms+0x1c>
  ec:	08 95       	ret
  ee:	00 00       	nop
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	31 09       	sbc	r19, r1
  f4:	e1 f7       	brne	.-8      	; 0xee <delay_ms+0x8>
  f6:	4f 5f       	subi	r20, 0xFF	; 255
  f8:	5f 4f       	sbci	r21, 0xFF	; 255
  fa:	84 17       	cp	r24, r20
  fc:	95 07       	cpc	r25, r21
  fe:	19 f4       	brne	.+6      	; 0x106 <delay_ms+0x20>
 100:	08 95       	ret
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	27 e0       	ldi	r18, 0x07	; 7
 108:	33 e0       	ldi	r19, 0x03	; 3
 10a:	f1 cf       	rjmp	.-30     	; 0xee <delay_ms+0x8>

0000010c <LCD_WriteCommand>:
 10c:	10 98       	cbi	0x02, 0	; 2
 10e:	8b b9       	out	0x0b, r24	; 11
 110:	11 9a       	sbi	0x02, 1	; 2
 112:	00 00       	nop
 114:	11 98       	cbi	0x02, 1	; 2
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	e5 cf       	rjmp	.-54     	; 0xe6 <delay_ms>
 11c:	08 95       	ret

0000011e <LCD_ClearScreen>:
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	f5 cf       	rjmp	.-22     	; 0x10c <LCD_WriteCommand>
 122:	08 95       	ret

00000124 <LCD_Cursor>:
 124:	81 31       	cpi	r24, 0x11	; 17
 126:	18 f4       	brcc	.+6      	; 0x12e <LCD_Cursor+0xa>
 128:	81 58       	subi	r24, 0x81	; 129
 12a:	f0 cf       	rjmp	.-32     	; 0x10c <LCD_WriteCommand>
 12c:	08 95       	ret
 12e:	81 55       	subi	r24, 0x51	; 81
 130:	ed cf       	rjmp	.-38     	; 0x10c <LCD_WriteCommand>
 132:	08 95       	ret

00000134 <LCD_init>:
 134:	84 e6       	ldi	r24, 0x64	; 100
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	d6 df       	rcall	.-84     	; 0xe6 <delay_ms>
 13a:	88 e3       	ldi	r24, 0x38	; 56
 13c:	e7 df       	rcall	.-50     	; 0x10c <LCD_WriteCommand>
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	e5 df       	rcall	.-54     	; 0x10c <LCD_WriteCommand>
 142:	8f e0       	ldi	r24, 0x0F	; 15
 144:	e3 df       	rcall	.-58     	; 0x10c <LCD_WriteCommand>
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	e1 df       	rcall	.-62     	; 0x10c <LCD_WriteCommand>
 14a:	8a e0       	ldi	r24, 0x0A	; 10
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	cb cf       	rjmp	.-106    	; 0xe6 <delay_ms>
 150:	08 95       	ret

00000152 <LCD_WriteData>:
 152:	10 9a       	sbi	0x02, 0	; 2
 154:	8b b9       	out	0x0b, r24	; 11
 156:	11 9a       	sbi	0x02, 1	; 2
 158:	00 00       	nop
 15a:	11 98       	cbi	0x02, 1	; 2
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	c2 cf       	rjmp	.-124    	; 0xe6 <delay_ms>
 162:	08 95       	ret

00000164 <LCD_DisplayString>:
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	18 2f       	mov	r17, r24
 16e:	eb 01       	movw	r28, r22
 170:	d6 df       	rcall	.-84     	; 0x11e <LCD_ClearScreen>
 172:	88 81       	ld	r24, Y
 174:	88 23       	and	r24, r24
 176:	51 f0       	breq	.+20     	; 0x18c <LCD_DisplayString+0x28>
 178:	01 e0       	ldi	r16, 0x01	; 1
 17a:	01 0f       	add	r16, r17
 17c:	81 2f       	mov	r24, r17
 17e:	d2 df       	rcall	.-92     	; 0x124 <LCD_Cursor>
 180:	89 91       	ld	r24, Y+
 182:	e7 df       	rcall	.-50     	; 0x152 <LCD_WriteData>
 184:	10 2f       	mov	r17, r16
 186:	88 81       	ld	r24, Y
 188:	81 11       	cpse	r24, r1
 18a:	f6 cf       	rjmp	.-20     	; 0x178 <LCD_DisplayString+0x14>
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <TimerSet>:
 196:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 19a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 19e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 1a2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 1a6:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <_avr_timer_cntcurr>
 1aa:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <_avr_timer_cntcurr+0x1>
 1ae:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <_avr_timer_cntcurr+0x2>
 1b2:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <_avr_timer_cntcurr+0x3>
 1b6:	08 95       	ret

000001b8 <TimerOn>:
 1b8:	8b e0       	ldi	r24, 0x0B	; 11
 1ba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1be:	8d e7       	ldi	r24, 0x7D	; 125
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1e0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1e4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1e8:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <_avr_timer_cntcurr>
 1ec:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <_avr_timer_cntcurr+0x1>
 1f0:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <_avr_timer_cntcurr+0x2>
 1f4:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <_avr_timer_cntcurr+0x3>
 1f8:	8f b7       	in	r24, 0x3f	; 63
 1fa:	80 68       	ori	r24, 0x80	; 128
 1fc:	8f bf       	out	0x3f, r24	; 63
 1fe:	08 95       	ret

00000200 <__vector_13>:
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	af 93       	push	r26
 210:	bf 93       	push	r27
 212:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <_avr_timer_cntcurr>
 216:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <_avr_timer_cntcurr+0x1>
 21a:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <_avr_timer_cntcurr+0x2>
 21e:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <_avr_timer_cntcurr+0x3>
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	a1 09       	sbc	r26, r1
 226:	b1 09       	sbc	r27, r1
 228:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <_avr_timer_cntcurr>
 22c:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <_avr_timer_cntcurr+0x1>
 230:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <_avr_timer_cntcurr+0x2>
 234:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <_avr_timer_cntcurr+0x3>
 238:	89 2b       	or	r24, r25
 23a:	8a 2b       	or	r24, r26
 23c:	8b 2b       	or	r24, r27
 23e:	99 f4       	brne	.+38     	; 0x266 <__vector_13+0x66>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <TimerFlag>
 246:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 24a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 24e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 252:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 256:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <_avr_timer_cntcurr>
 25a:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <_avr_timer_cntcurr+0x1>
 25e:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <_avr_timer_cntcurr+0x2>
 262:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <_avr_timer_cntcurr+0x3>
 266:	bf 91       	pop	r27
 268:	af 91       	pop	r26
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <set_PWM>:
 278:	cf 92       	push	r12
 27a:	df 92       	push	r13
 27c:	ef 92       	push	r14
 27e:	ff 92       	push	r15
 280:	6b 01       	movw	r12, r22
 282:	7c 01       	movw	r14, r24
 284:	9b 01       	movw	r18, r22
 286:	ac 01       	movw	r20, r24
 288:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <current_frequency.2112>
 28c:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <current_frequency.2112+0x1>
 290:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <current_frequency.2112+0x2>
 294:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <current_frequency.2112+0x3>
 298:	22 d4       	rcall	.+2116   	; 0xade <__cmpsf2>
 29a:	88 23       	and	r24, r24
 29c:	09 f4       	brne	.+2      	; 0x2a0 <set_PWM+0x28>
 29e:	52 c0       	rjmp	.+164    	; 0x344 <set_PWM+0xcc>
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	a9 01       	movw	r20, r18
 2a6:	c7 01       	movw	r24, r14
 2a8:	b6 01       	movw	r22, r12
 2aa:	19 d4       	rcall	.+2098   	; 0xade <__cmpsf2>
 2ac:	81 11       	cpse	r24, r1
 2ae:	06 c0       	rjmp	.+12     	; 0x2bc <set_PWM+0x44>
 2b0:	e1 e9       	ldi	r30, 0x91	; 145
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	88 70       	andi	r24, 0x08	; 8
 2b8:	80 83       	st	Z, r24
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <set_PWM+0x4e>
 2bc:	e1 e9       	ldi	r30, 0x91	; 145
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	83 60       	ori	r24, 0x03	; 3
 2c4:	80 83       	st	Z, r24
 2c6:	28 e5       	ldi	r18, 0x58	; 88
 2c8:	39 e3       	ldi	r19, 0x39	; 57
 2ca:	44 e7       	ldi	r20, 0x74	; 116
 2cc:	5f e3       	ldi	r21, 0x3F	; 63
 2ce:	c7 01       	movw	r24, r14
 2d0:	b6 01       	movw	r22, r12
 2d2:	05 d4       	rcall	.+2058   	; 0xade <__cmpsf2>
 2d4:	88 23       	and	r24, r24
 2d6:	3c f4       	brge	.+14     	; 0x2e6 <set_PWM+0x6e>
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	9f ef       	ldi	r25, 0xFF	; 255
 2dc:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 2e0:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 2e4:	23 c0       	rjmp	.+70     	; 0x32c <set_PWM+0xb4>
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	34 e2       	ldi	r19, 0x24	; 36
 2ea:	44 ef       	ldi	r20, 0xF4	; 244
 2ec:	56 e4       	ldi	r21, 0x46	; 70
 2ee:	c7 01       	movw	r24, r14
 2f0:	b6 01       	movw	r22, r12
 2f2:	07 d5       	rcall	.+2574   	; 0xd02 <__gesf2>
 2f4:	18 16       	cp	r1, r24
 2f6:	2c f4       	brge	.+10     	; 0x302 <set_PWM+0x8a>
 2f8:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 2fc:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 300:	15 c0       	rjmp	.+42     	; 0x32c <set_PWM+0xb4>
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	53 e4       	ldi	r21, 0x43	; 67
 30a:	c7 01       	movw	r24, r14
 30c:	b6 01       	movw	r22, r12
 30e:	fd d4       	rcall	.+2554   	; 0xd0a <__mulsf3>
 310:	9b 01       	movw	r18, r22
 312:	ac 01       	movw	r20, r24
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	74 e2       	ldi	r23, 0x24	; 36
 318:	84 ef       	ldi	r24, 0xF4	; 244
 31a:	9a e4       	ldi	r25, 0x4A	; 74
 31c:	e4 d3       	rcall	.+1992   	; 0xae6 <__divsf3>
 31e:	4b d4       	rcall	.+2198   	; 0xbb6 <__fixsfsi>
 320:	61 50       	subi	r22, 0x01	; 1
 322:	71 09       	sbc	r23, r1
 324:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 328:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 32c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 330:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 334:	c0 92 60 01 	sts	0x0160, r12	; 0x800160 <current_frequency.2112>
 338:	d0 92 61 01 	sts	0x0161, r13	; 0x800161 <current_frequency.2112+0x1>
 33c:	e0 92 62 01 	sts	0x0162, r14	; 0x800162 <current_frequency.2112+0x2>
 340:	f0 92 63 01 	sts	0x0163, r15	; 0x800163 <current_frequency.2112+0x3>
 344:	ff 90       	pop	r15
 346:	ef 90       	pop	r14
 348:	df 90       	pop	r13
 34a:	cf 90       	pop	r12
 34c:	08 95       	ret

0000034e <SMTick1>:
 34e:	cf 93       	push	r28
 350:	26 b1       	in	r18, 0x06	; 6
 352:	36 b1       	in	r19, 0x06	; 6
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	91 05       	cpc	r25, r1
 358:	79 f0       	breq	.+30     	; 0x378 <SMTick1+0x2a>
 35a:	1c f4       	brge	.+6      	; 0x362 <SMTick1+0x14>
 35c:	89 2b       	or	r24, r25
 35e:	39 f0       	breq	.+14     	; 0x36e <SMTick1+0x20>
 360:	20 c0       	rjmp	.+64     	; 0x3a2 <SMTick1+0x54>
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	91 05       	cpc	r25, r1
 366:	91 f0       	breq	.+36     	; 0x38c <SMTick1+0x3e>
 368:	03 97       	sbiw	r24, 0x03	; 3
 36a:	a9 f0       	breq	.+42     	; 0x396 <SMTick1+0x48>
 36c:	1a c0       	rjmp	.+52     	; 0x3a2 <SMTick1+0x54>
 36e:	20 ff       	sbrs	r18, 0
 370:	33 c0       	rjmp	.+102    	; 0x3d8 <SMTick1+0x8a>
 372:	31 ff       	sbrs	r19, 1
 374:	48 c0       	rjmp	.+144    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 376:	27 c0       	rjmp	.+78     	; 0x3c6 <SMTick1+0x78>
 378:	31 e0       	ldi	r19, 0x01	; 1
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <tick1.2159>
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	09 f4       	brne	.+2      	; 0x386 <SMTick1+0x38>
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	83 2f       	mov	r24, r19
 388:	92 2f       	mov	r25, r18
 38a:	0d c0       	rjmp	.+26     	; 0x3a6 <SMTick1+0x58>
 38c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <tick1.2159>
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	c9 f5       	brne	.+114    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 394:	18 c0       	rjmp	.+48     	; 0x3c6 <SMTick1+0x78>
 396:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <tick1.2159>
 39a:	84 30       	cpi	r24, 0x04	; 4
 39c:	09 f0       	breq	.+2      	; 0x3a0 <SMTick1+0x52>
 39e:	4a c0       	rjmp	.+148    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3a0:	12 c0       	rjmp	.+36     	; 0x3c6 <SMTick1+0x78>
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	91 05       	cpc	r25, r1
 3aa:	b1 f0       	breq	.+44     	; 0x3d8 <SMTick1+0x8a>
 3ac:	24 f4       	brge	.+8      	; 0x3b6 <SMTick1+0x68>
 3ae:	00 97       	sbiw	r24, 0x00	; 0
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <SMTick1+0x66>
 3b2:	5d c0       	rjmp	.+186    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 3b4:	08 c0       	rjmp	.+16     	; 0x3c6 <SMTick1+0x78>
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	91 05       	cpc	r25, r1
 3ba:	29 f1       	breq	.+74     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3bc:	83 30       	cpi	r24, 0x03	; 3
 3be:	91 05       	cpc	r25, r1
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <SMTick1+0x76>
 3c2:	55 c0       	rjmp	.+170    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 3c4:	37 c0       	rjmp	.+110    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	cb 01       	movw	r24, r22
 3cc:	55 df       	rcall	.-342    	; 0x278 <set_PWM>
 3ce:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <tick1.2159>
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	4b c0       	rjmp	.+150    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 3d8:	c0 91 5f 01 	lds	r28, 0x015F	; 0x80015f <tick1.2159>
 3dc:	c1 11       	cpse	r28, r1
 3de:	06 c0       	rjmp	.+12     	; 0x3ec <SMTick1+0x9e>
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	70 e8       	ldi	r23, 0x80	; 128
 3e4:	86 ef       	ldi	r24, 0xF6	; 246
 3e6:	93 e4       	ldi	r25, 0x43	; 67
 3e8:	47 df       	rcall	.-370    	; 0x278 <set_PWM>
 3ea:	07 c0       	rjmp	.+14     	; 0x3fa <SMTick1+0xac>
 3ec:	c1 30       	cpi	r28, 0x01	; 1
 3ee:	29 f4       	brne	.+10     	; 0x3fa <SMTick1+0xac>
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	70 ec       	ldi	r23, 0xC0	; 192
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	94 e4       	ldi	r25, 0x44	; 68
 3f8:	3f df       	rcall	.-386    	; 0x278 <set_PWM>
 3fa:	cf 5f       	subi	r28, 0xFF	; 255
 3fc:	c0 93 5f 01 	sts	0x015F, r28	; 0x80015f <tick1.2159>
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	34 c0       	rjmp	.+104    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 406:	c0 91 5f 01 	lds	r28, 0x015F	; 0x80015f <tick1.2159>
 40a:	c1 11       	cpse	r28, r1
 40c:	06 c0       	rjmp	.+12     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	70 e8       	ldi	r23, 0x80	; 128
 412:	82 e9       	ldi	r24, 0x92	; 146
 414:	93 e4       	ldi	r25, 0x43	; 67
 416:	30 df       	rcall	.-416    	; 0x278 <set_PWM>
 418:	07 c0       	rjmp	.+14     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41a:	c1 30       	cpi	r28, 0x01	; 1
 41c:	29 f4       	brne	.+10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	70 e8       	ldi	r23, 0x80	; 128
 422:	82 e8       	ldi	r24, 0x82	; 130
 424:	93 e4       	ldi	r25, 0x43	; 67
 426:	28 df       	rcall	.-432    	; 0x278 <set_PWM>
 428:	cf 5f       	subi	r28, 0xFF	; 255
 42a:	c0 93 5f 01 	sts	0x015F, r28	; 0x80015f <tick1.2159>
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	1d c0       	rjmp	.+58     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 434:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <tick1.2159>
 438:	81 11       	cpse	r24, r1
 43a:	08 c0       	rjmp	.+16     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	84 ec       	ldi	r24, 0xC4	; 196
 442:	93 e4       	ldi	r25, 0x43	; 67
 444:	19 df       	rcall	.-462    	; 0x278 <set_PWM>
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	11 c0       	rjmp	.+34     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	41 f4       	brne	.+16     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	8c ed       	ldi	r24, 0xDC	; 220
 456:	93 e4       	ldi	r25, 0x43	; 67
 458:	0f df       	rcall	.-482    	; 0x278 <set_PWM>
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	07 c0       	rjmp	.+14     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	70 ec       	ldi	r23, 0xC0	; 192
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	94 e4       	ldi	r25, 0x44	; 68
 468:	07 df       	rcall	.-498    	; 0x278 <set_PWM>
 46a:	83 e0       	ldi	r24, 0x03	; 3
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <PWM_on>:
 472:	80 e4       	ldi	r24, 0x40	; 64
 474:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 478:	8b e0       	ldi	r24, 0x0B	; 11
 47a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	cb 01       	movw	r24, r22
 484:	f9 ce       	rjmp	.-526    	; 0x278 <set_PWM>
 486:	08 95       	ret

00000488 <transmit_data>:
#define RCLK 0x0002
#define SRCLK 0x0004
#define SRCLR 0x0008

void transmit_data(uc data1, uc data2) {
	unsigned short data = data1;
 488:	90 e0       	ldi	r25, 0x00	; 0
	data = data << 8;
 48a:	98 2f       	mov	r25, r24
 48c:	88 27       	eor	r24, r24
	data = data + data2;
 48e:	86 0f       	add	r24, r22
 490:	91 1d       	adc	r25, r1
 492:	40 e1       	ldi	r20, 0x10	; 16
	
	// for each bit of data
	for(uc i = 0; i < 16; ++i){
		// Set SRCLR to 1 allowing data to be set
		// Also clear SRCLK in preparation of sending data
		PORTB = SRCLR;
 494:	58 e0       	ldi	r21, 0x08	; 8
 496:	55 b9       	out	0x05, r21	; 5
		// set SER = next bit of data to be sent.
		unsigned short sendBit = (SRCLR | (SER & data));
 498:	9c 01       	movw	r18, r24
 49a:	21 70       	andi	r18, 0x01	; 1
 49c:	33 27       	eor	r19, r19
 49e:	28 60       	ori	r18, 0x08	; 8
		data = data >> 1;
 4a0:	96 95       	lsr	r25
 4a2:	87 95       	ror	r24
		// set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		PORTB = (sendBit | SRCLK);
 4a4:	24 60       	ori	r18, 0x04	; 4
 4a6:	25 b9       	out	0x05, r18	; 5
 4a8:	41 50       	subi	r20, 0x01	; 1
	unsigned short data = data1;
	data = data << 8;
	data = data + data2;
	
	// for each bit of data
	for(uc i = 0; i < 16; ++i){
 4aa:	a9 f7       	brne	.-22     	; 0x496 <transmit_data+0xe>
		// set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		PORTB = (sendBit | SRCLK);
		// end for each bit of data
	}
	// set RCLK = 1. Rising edge copies data from the "Shift" register to the "Storage" register
	PORTB = (SRCLR | RCLK);
 4ac:	8a e0       	ldi	r24, 0x0A	; 10
 4ae:	85 b9       	out	0x05, r24	; 5
	// clears all lines in preparation of a new transmission
	PORTB = 0x00;
 4b0:	15 b8       	out	0x05, r1	; 5
 4b2:	08 95       	ret

000004b4 <clear_data>:
}

void clear_data() {
	PORTB = SRCLK;
 4b4:	84 e0       	ldi	r24, 0x04	; 4
 4b6:	85 b9       	out	0x05, r24	; 5
	PORTB = RCLK;
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	85 b9       	out	0x05, r24	; 5
 4bc:	08 95       	ret

000004be <SMTick2>:
	return state;
}

enum displayState { ROW1, ROW2, ROW3, ROW4, ROW5, ROW6, ROW7, ROW8 };

int SMTick2(int state) {
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	ec 01       	movw	r28, r24
	clear_data();
 4c4:	f7 df       	rcall	.-18     	; 0x4b4 <clear_data>
	
	switch(state) {
 4c6:	c8 30       	cpi	r28, 0x08	; 8
 4c8:	d1 05       	cpc	r29, r1
 4ca:	08 f0       	brcs	.+2      	; 0x4ce <SMTick2+0x10>
 4cc:	84 c0       	rjmp	.+264    	; 0x5d6 <SMTick2+0x118>
 4ce:	fe 01       	movw	r30, r28
 4d0:	ea 5b       	subi	r30, 0xBA	; 186
 4d2:	ff 4f       	sbci	r31, 0xFF	; 255
 4d4:	9f c4       	rjmp	.+2366   	; 0xe14 <__tablejump2__>
		case ROW1:
			if(placedBlocks[0] != 0) {
 4d6:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <placedBlocks>
 4da:	88 23       	and	r24, r24
				transmit_data(placedBlocks[0], 0x7F);
 4dc:	29 f0       	breq	.+10     	; 0x4e8 <SMTick2+0x2a>
 4de:	6f e7       	ldi	r22, 0x7F	; 127
 4e0:	d3 df       	rcall	.-90     	; 0x488 <transmit_data>
			}
			else {
				transmit_data(currentBlocks[0], 0x7F);
			}
			state = ROW2;
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	79 c0       	rjmp	.+242    	; 0x5da <SMTick2+0x11c>
		case ROW1:
			if(placedBlocks[0] != 0) {
				transmit_data(placedBlocks[0], 0x7F);
			}
			else {
				transmit_data(currentBlocks[0], 0x7F);
 4e8:	6f e7       	ldi	r22, 0x7F	; 127
 4ea:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <currentBlocks>
 4ee:	cc df       	rcall	.-104    	; 0x488 <transmit_data>
			}
			state = ROW2;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	72 c0       	rjmp	.+228    	; 0x5da <SMTick2+0x11c>
			break;
		case ROW2:
			if(placedBlocks[1] != 0) {
 4f6:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <placedBlocks+0x1>
 4fa:	88 23       	and	r24, r24
				transmit_data(placedBlocks[1], 0xBF);
 4fc:	29 f0       	breq	.+10     	; 0x508 <SMTick2+0x4a>
 4fe:	6f eb       	ldi	r22, 0xBF	; 191
 500:	c3 df       	rcall	.-122    	; 0x488 <transmit_data>
			}
			else {
				transmit_data(currentBlocks[1], 0xBF);
			}
			state = ROW3;
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	90 e0       	ldi	r25, 0x00	; 0
		case ROW2:
			if(placedBlocks[1] != 0) {
				transmit_data(placedBlocks[1], 0xBF);
			}
			else {
				transmit_data(currentBlocks[1], 0xBF);
 506:	69 c0       	rjmp	.+210    	; 0x5da <SMTick2+0x11c>
 508:	6f eb       	ldi	r22, 0xBF	; 191
 50a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <currentBlocks+0x1>
 50e:	bc df       	rcall	.-136    	; 0x488 <transmit_data>
			}
			state = ROW3;
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case ROW3:
			if(placedBlocks[2] != 0) {
 514:	62 c0       	rjmp	.+196    	; 0x5da <SMTick2+0x11c>
 516:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <placedBlocks+0x2>
 51a:	88 23       	and	r24, r24
				transmit_data(placedBlocks[2], 0xDF);
 51c:	29 f0       	breq	.+10     	; 0x528 <SMTick2+0x6a>
 51e:	6f ed       	ldi	r22, 0xDF	; 223
			}
			else {
				transmit_data(currentBlocks[2], 0xDF);
			}
			state = ROW4;
 520:	b3 df       	rcall	.-154    	; 0x488 <transmit_data>
 522:	83 e0       	ldi	r24, 0x03	; 3
 524:	90 e0       	ldi	r25, 0x00	; 0
		case ROW3:
			if(placedBlocks[2] != 0) {
				transmit_data(placedBlocks[2], 0xDF);
			}
			else {
				transmit_data(currentBlocks[2], 0xDF);
 526:	59 c0       	rjmp	.+178    	; 0x5da <SMTick2+0x11c>
 528:	6f ed       	ldi	r22, 0xDF	; 223
 52a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <currentBlocks+0x2>
 52e:	ac df       	rcall	.-168    	; 0x488 <transmit_data>
			}
			state = ROW4;
 530:	83 e0       	ldi	r24, 0x03	; 3
 532:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case ROW4:
			if(placedBlocks[3] != 0) {
 534:	52 c0       	rjmp	.+164    	; 0x5da <SMTick2+0x11c>
 536:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <placedBlocks+0x3>
 53a:	88 23       	and	r24, r24
				transmit_data(placedBlocks[3], 0xEF);
 53c:	29 f0       	breq	.+10     	; 0x548 <SMTick2+0x8a>
 53e:	6f ee       	ldi	r22, 0xEF	; 239
			}
			else {
				transmit_data(currentBlocks[3], 0xEF);
			}
			state = ROW5;
 540:	a3 df       	rcall	.-186    	; 0x488 <transmit_data>
 542:	84 e0       	ldi	r24, 0x04	; 4
 544:	90 e0       	ldi	r25, 0x00	; 0
		case ROW4:
			if(placedBlocks[3] != 0) {
				transmit_data(placedBlocks[3], 0xEF);
			}
			else {
				transmit_data(currentBlocks[3], 0xEF);
 546:	49 c0       	rjmp	.+146    	; 0x5da <SMTick2+0x11c>
 548:	6f ee       	ldi	r22, 0xEF	; 239
 54a:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <currentBlocks+0x3>
			}
			state = ROW5;
 54e:	9c df       	rcall	.-200    	; 0x488 <transmit_data>
 550:	84 e0       	ldi	r24, 0x04	; 4
 552:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case ROW5:
			if(placedBlocks[4] != 0) {
 554:	42 c0       	rjmp	.+132    	; 0x5da <SMTick2+0x11c>
 556:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <placedBlocks+0x4>
				transmit_data(placedBlocks[4], 0xF7);
 55a:	88 23       	and	r24, r24
 55c:	29 f0       	breq	.+10     	; 0x568 <SMTick2+0xaa>
 55e:	67 ef       	ldi	r22, 0xF7	; 247
			}
			else {
				transmit_data(currentBlocks[4], 0xF7);
			}
			state = ROW6;
 560:	93 df       	rcall	.-218    	; 0x488 <transmit_data>
 562:	85 e0       	ldi	r24, 0x05	; 5
 564:	90 e0       	ldi	r25, 0x00	; 0
		case ROW5:
			if(placedBlocks[4] != 0) {
				transmit_data(placedBlocks[4], 0xF7);
			}
			else {
				transmit_data(currentBlocks[4], 0xF7);
 566:	39 c0       	rjmp	.+114    	; 0x5da <SMTick2+0x11c>
 568:	67 ef       	ldi	r22, 0xF7	; 247
 56a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <currentBlocks+0x4>
			}
			state = ROW6;
 56e:	8c df       	rcall	.-232    	; 0x488 <transmit_data>
 570:	85 e0       	ldi	r24, 0x05	; 5
 572:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case ROW6:
			if(placedBlocks[5] != 0) {
 574:	32 c0       	rjmp	.+100    	; 0x5da <SMTick2+0x11c>
 576:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <placedBlocks+0x5>
				transmit_data(placedBlocks[5], 0xFB);
 57a:	88 23       	and	r24, r24
 57c:	29 f0       	breq	.+10     	; 0x588 <SMTick2+0xca>
 57e:	6b ef       	ldi	r22, 0xFB	; 251
			}
			else {
				transmit_data(currentBlocks[5], 0xFB);
			}
			state = ROW7;
 580:	83 df       	rcall	.-250    	; 0x488 <transmit_data>
 582:	86 e0       	ldi	r24, 0x06	; 6
		case ROW6:
			if(placedBlocks[5] != 0) {
				transmit_data(placedBlocks[5], 0xFB);
			}
			else {
				transmit_data(currentBlocks[5], 0xFB);
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	29 c0       	rjmp	.+82     	; 0x5da <SMTick2+0x11c>
 588:	6b ef       	ldi	r22, 0xFB	; 251
 58a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <currentBlocks+0x5>
			}
			state = ROW7;
 58e:	7c df       	rcall	.-264    	; 0x488 <transmit_data>
 590:	86 e0       	ldi	r24, 0x06	; 6
			break;
		case ROW7:
			if(placedBlocks[6] != 0) {
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	22 c0       	rjmp	.+68     	; 0x5da <SMTick2+0x11c>
 596:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <placedBlocks+0x6>
				transmit_data(placedBlocks[6], 0xFD);
 59a:	88 23       	and	r24, r24
 59c:	29 f0       	breq	.+10     	; 0x5a8 <SMTick2+0xea>
 59e:	6d ef       	ldi	r22, 0xFD	; 253
			}
			else {
				transmit_data(currentBlocks[6], 0xFD);
			}
			state = ROW8;
 5a0:	73 df       	rcall	.-282    	; 0x488 <transmit_data>
 5a2:	87 e0       	ldi	r24, 0x07	; 7
		case ROW7:
			if(placedBlocks[6] != 0) {
				transmit_data(placedBlocks[6], 0xFD);
			}
			else {
				transmit_data(currentBlocks[6], 0xFD);
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	19 c0       	rjmp	.+50     	; 0x5da <SMTick2+0x11c>
 5a8:	6d ef       	ldi	r22, 0xFD	; 253
 5aa:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <currentBlocks+0x6>
			}
			state = ROW8;
 5ae:	6c df       	rcall	.-296    	; 0x488 <transmit_data>
 5b0:	87 e0       	ldi	r24, 0x07	; 7
			break;
		case ROW8:
			if(placedBlocks[7] != 0) {
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	12 c0       	rjmp	.+36     	; 0x5da <SMTick2+0x11c>
 5b6:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <placedBlocks+0x7>
				transmit_data(placedBlocks[7], 0xFE);
 5ba:	88 23       	and	r24, r24
 5bc:	29 f0       	breq	.+10     	; 0x5c8 <SMTick2+0x10a>
 5be:	6e ef       	ldi	r22, 0xFE	; 254
			}
			else {
				transmit_data(currentBlocks[7], 0xFE);
			}
			state = ROW1;
 5c0:	63 df       	rcall	.-314    	; 0x488 <transmit_data>
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	90 e0       	ldi	r25, 0x00	; 0
		case ROW8:
			if(placedBlocks[7] != 0) {
				transmit_data(placedBlocks[7], 0xFE);
			}
			else {
				transmit_data(currentBlocks[7], 0xFE);
 5c6:	09 c0       	rjmp	.+18     	; 0x5da <SMTick2+0x11c>
 5c8:	6e ef       	ldi	r22, 0xFE	; 254
 5ca:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <currentBlocks+0x7>
 5ce:	5c df       	rcall	.-328    	; 0x488 <transmit_data>
			}
			state = ROW1;
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <SMTick2+0x11c>
			break;
		default:
			state = ROW1;
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	90 e0       	ldi	r25, 0x00	; 0
			break;
	}
	
	return state;
}
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	08 95       	ret

000005e0 <checkPlacement>:
Stack result;

//===Functions===
uc checkPlacement(uc placed, uc current, uc size) { //Checks if placement was valid, returns # of blocks placed correctly
	uc i = 0;
	if(!(placed & current)) {
 5e0:	98 2f       	mov	r25, r24
 5e2:	96 23       	and	r25, r22
 5e4:	d1 f1       	breq	.+116    	; 0x65a <checkPlacement+0x7a>
		return 0;
	}
	else if(placed == current) {
 5e6:	86 17       	cp	r24, r22
 5e8:	69 f1       	breq	.+90     	; 0x644 <checkPlacement+0x64>
		return size;
	}
	else {
		switch(size) {
 5ea:	42 30       	cpi	r20, 0x02	; 2
 5ec:	69 f1       	breq	.+90     	; 0x648 <checkPlacement+0x68>
 5ee:	43 30       	cpi	r20, 0x03	; 3
 5f0:	11 f0       	breq	.+4      	; 0x5f6 <checkPlacement+0x16>
				break;
			case 2:
				return 1;
				break;
			case 1:
				return 0;
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	32 c0       	rjmp	.+100    	; 0x65a <checkPlacement+0x7a>
	}
	else {
		switch(size) {
			case 3:
				//Check if either is on right side
				if(placed & 0x01) {
 5f6:	80 ff       	sbrs	r24, 0
 5f8:	04 c0       	rjmp	.+8      	; 0x602 <checkPlacement+0x22>
					if(current & 0x02) {
 5fa:	61 fd       	sbrc	r22, 1
 5fc:	27 c0       	rjmp	.+78     	; 0x64c <checkPlacement+0x6c>
						return 2;
					}
					else {
						return 1;
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	2c c0       	rjmp	.+88     	; 0x65a <checkPlacement+0x7a>
					}
				}
				else if(current & 0x01) {
 602:	96 2f       	mov	r25, r22
 604:	91 70       	andi	r25, 0x01	; 1
 606:	60 fd       	sbrc	r22, 0
 608:	05 c0       	rjmp	.+10     	; 0x614 <checkPlacement+0x34>
						return 1;
					}
				}
				else {
					//Neither on right side
					while(!((placed & 0x01) || (current & 0x01))) {
 60a:	28 2f       	mov	r18, r24
 60c:	26 2b       	or	r18, r22
 60e:	20 ff       	sbrs	r18, 0
 610:	05 c0       	rjmp	.+10     	; 0x61c <checkPlacement+0x3c>
 612:	23 c0       	rjmp	.+70     	; 0x65a <checkPlacement+0x7a>
					else {
						return 1;
					}
				}
				else if(current & 0x01) {
					if(placed & 0x02) {
 614:	81 fd       	sbrc	r24, 1
 616:	1c c0       	rjmp	.+56     	; 0x650 <checkPlacement+0x70>
						return 2;
					}
					else {
						return 1;
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	1f c0       	rjmp	.+62     	; 0x65a <checkPlacement+0x7a>
					}
				}
				else {
					//Neither on right side
					while(!((placed & 0x01) || (current & 0x01))) {
						current = current >> 1;
 61c:	66 95       	lsr	r22
						placed = placed >> 1;
 61e:	86 95       	lsr	r24
						return 1;
					}
				}
				else {
					//Neither on right side
					while(!((placed & 0x01) || (current & 0x01))) {
 620:	96 2f       	mov	r25, r22
 622:	98 2b       	or	r25, r24
 624:	90 ff       	sbrs	r25, 0
 626:	fa cf       	rjmp	.-12     	; 0x61c <checkPlacement+0x3c>
						current = current >> 1;
						placed = placed >> 1;
						i++;
					}
					if(placed & 0x01) {
 628:	80 ff       	sbrs	r24, 0
 62a:	04 c0       	rjmp	.+8      	; 0x634 <checkPlacement+0x54>
						if(current & 0x02) {
 62c:	61 fd       	sbrc	r22, 1
 62e:	12 c0       	rjmp	.+36     	; 0x654 <checkPlacement+0x74>
							return 2;
						}
						else {
							return 1;
 630:	91 e0       	ldi	r25, 0x01	; 1
 632:	13 c0       	rjmp	.+38     	; 0x65a <checkPlacement+0x7a>
						}
					}
					else if(current & 0x01) {
 634:	96 2f       	mov	r25, r22
 636:	91 70       	andi	r25, 0x01	; 1
 638:	60 ff       	sbrs	r22, 0
 63a:	0f c0       	rjmp	.+30     	; 0x65a <checkPlacement+0x7a>
						if(placed & 0x02) {
 63c:	81 fd       	sbrc	r24, 1
 63e:	0c c0       	rjmp	.+24     	; 0x658 <checkPlacement+0x78>
							return 2;
						}
						else {
							return 1;
 640:	91 e0       	ldi	r25, 0x01	; 1
 642:	0b c0       	rjmp	.+22     	; 0x65a <checkPlacement+0x7a>
	uc i = 0;
	if(!(placed & current)) {
		return 0;
	}
	else if(placed == current) {
		return size;
 644:	94 2f       	mov	r25, r20
 646:	09 c0       	rjmp	.+18     	; 0x65a <checkPlacement+0x7a>
						}
					}
				}
				break;
			case 2:
				return 1;
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	07 c0       	rjmp	.+14     	; 0x65a <checkPlacement+0x7a>
		switch(size) {
			case 3:
				//Check if either is on right side
				if(placed & 0x01) {
					if(current & 0x02) {
						return 2;
 64c:	92 e0       	ldi	r25, 0x02	; 2
 64e:	05 c0       	rjmp	.+10     	; 0x65a <checkPlacement+0x7a>
						return 1;
					}
				}
				else if(current & 0x01) {
					if(placed & 0x02) {
						return 2;
 650:	92 e0       	ldi	r25, 0x02	; 2
 652:	03 c0       	rjmp	.+6      	; 0x65a <checkPlacement+0x7a>
						placed = placed >> 1;
						i++;
					}
					if(placed & 0x01) {
						if(current & 0x02) {
							return 2;
 654:	92 e0       	ldi	r25, 0x02	; 2
 656:	01 c0       	rjmp	.+2      	; 0x65a <checkPlacement+0x7a>
							return 1;
						}
					}
					else if(current & 0x01) {
						if(placed & 0x02) {
							return 2;
 658:	92 e0       	ldi	r25, 0x02	; 2
				return 0;
				break;
		}
	}
	return 0;
}
 65a:	89 2f       	mov	r24, r25
 65c:	08 95       	ret

0000065e <SMTick3>:
	return state;
}

enum gameState { MENU, PLAY, CHECK, WIN, LOSE, GAME_RESET, DIFFICULTY_SELECT };

int SMTick3(int state) {
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
	static uc currentSize; //Size of current blocks 1-3
	static uc direction; //0 = Left | 1 = Right
	static uc difficulty; //number of starting blocks (lower is harder)
	static uc tick;
	
	uc playButton = ~PINC & 0x01;
 666:	26 b1       	in	r18, 0x06	; 6
 668:	21 70       	andi	r18, 0x01	; 1
	uc gameResetButton = ~PINC & 0x02;
 66a:	36 b1       	in	r19, 0x06	; 6
	uc difficultyButton = ~PINC & 0x04;
 66c:	46 b1       	in	r20, 0x06	; 6
	
	switch(state) {
 66e:	87 30       	cpi	r24, 0x07	; 7
 670:	91 05       	cpc	r25, r1
 672:	08 f0       	brcs	.+2      	; 0x676 <SMTick3+0x18>
 674:	43 c0       	rjmp	.+134    	; 0x6fc <SMTick3+0x9e>
 676:	fc 01       	movw	r30, r24
 678:	e2 5b       	subi	r30, 0xB2	; 178
 67a:	ff 4f       	sbci	r31, 0xFF	; 255
 67c:	cb c3       	rjmp	.+1942   	; 0xe14 <__tablejump2__>
		case MENU:
			if(playButton) {
 67e:	21 11       	cpse	r18, r1
 680:	40 c1       	rjmp	.+640    	; 0x902 <SMTick3+0x2a4>
				play = 1;
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <play.2204>
 688:	52 c0       	rjmp	.+164    	; 0x72e <SMTick3+0xd0>
			}
			if(play) {
				if(!playButton) {
					play = 0;
 68a:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <play.2204>
					state = PLAY;
					currentRow = 7;
 68e:	87 e0       	ldi	r24, 0x07	; 7
 690:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <currentRow.2205>
					currentSize = difficulty;
 694:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <difficulty.2208>
 698:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <currentSize.2206>
					direction = 0;
 69c:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <direction.2207>
					tick = 1;
 6a0:	91 e0       	ldi	r25, 0x01	; 1
 6a2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <tick.2209>
					if (difficulty == 3) {
 6a6:	83 30       	cpi	r24, 0x03	; 3
 6a8:	21 f4       	brne	.+8      	; 0x6b2 <SMTick3+0x54>
						currentBlocks[7] = 0x07;
 6aa:	87 e0       	ldi	r24, 0x07	; 7
 6ac:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <currentBlocks+0x7>
 6b0:	58 c0       	rjmp	.+176    	; 0x762 <SMTick3+0x104>
					}
					else if (difficulty == 2) {
 6b2:	82 30       	cpi	r24, 0x02	; 2
 6b4:	21 f4       	brne	.+8      	; 0x6be <SMTick3+0x60>
						currentBlocks[7] = 0x18;
 6b6:	88 e1       	ldi	r24, 0x18	; 24
 6b8:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <currentBlocks+0x7>
 6bc:	52 c0       	rjmp	.+164    	; 0x762 <SMTick3+0x104>
					}
					else {
						currentBlocks[7] = 0x10;
 6be:	80 e1       	ldi	r24, 0x10	; 16
 6c0:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <currentBlocks+0x7>
 6c4:	4e c0       	rjmp	.+156    	; 0x762 <SMTick3+0x104>
					}
				}
			}
			else if(difficultyButton) {
 6c6:	42 ff       	sbrs	r20, 2
 6c8:	0d c1       	rjmp	.+538    	; 0x8e4 <SMTick3+0x286>
 6ca:	31 c0       	rjmp	.+98     	; 0x72e <SMTick3+0xd0>
			else {
				state = MENU;
			}
			break;
		case PLAY:
			if(gameResetButton) {
 6cc:	31 ff       	sbrs	r19, 1
 6ce:	2f c0       	rjmp	.+94     	; 0x72e <SMTick3+0xd0>
				state = MENU;
			}
			else if(playButton) {
 6d0:	22 23       	and	r18, r18
 6d2:	09 f4       	brne	.+2      	; 0x6d6 <SMTick3+0x78>
 6d4:	6c c0       	rjmp	.+216    	; 0x7ae <SMTick3+0x150>
 6d6:	45 c0       	rjmp	.+138    	; 0x762 <SMTick3+0x104>
		case CHECK:
			state = PLAY;
			break;
		case WIN:
			//Nothing
			if(playButton) {
 6d8:	21 11       	cpse	r18, r1
 6da:	19 c1       	rjmp	.+562    	; 0x90e <SMTick3+0x2b0>
				play = 1;
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <play.2204>
 6e2:	e4 c0       	rjmp	.+456    	; 0x8ac <SMTick3+0x24e>
			}
			if(play) {
				if(!playButton) {
					play = 0;
 6e4:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <play.2204>
 6e8:	27 c0       	rjmp	.+78     	; 0x738 <SMTick3+0xda>
				state = WIN;
			}
			break;
		case LOSE:
			//Nothing
			if(playButton) {
 6ea:	21 11       	cpse	r18, r1
 6ec:	15 c1       	rjmp	.+554    	; 0x918 <SMTick3+0x2ba>
				play = 1;
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <play.2204>
 6f4:	e9 c0       	rjmp	.+466    	; 0x8c8 <SMTick3+0x26a>
			}
			if(play) {
				if(!playButton) {
					play = 0;
 6f6:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <play.2204>
 6fa:	1e c0       	rjmp	.+60     	; 0x738 <SMTick3+0xda>
			break;
		case DIFFICULTY_SELECT:
			//Nothing
			break;
		default:
			difficulty = 3;
 6fc:	83 e0       	ldi	r24, 0x03	; 3
 6fe:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <difficulty.2208>
			tick = 1;
			state = MENU;
			break;
 702:	1a c0       	rjmp	.+52     	; 0x738 <SMTick3+0xda>
	}
	uc i;
	switch(state) {
 704:	82 30       	cpi	r24, 0x02	; 2
 706:	91 05       	cpc	r25, r1
 708:	09 f4       	brne	.+2      	; 0x70c <SMTick3+0xae>
 70a:	51 c0       	rjmp	.+162    	; 0x7ae <SMTick3+0x150>
 70c:	3c f4       	brge	.+14     	; 0x71c <SMTick3+0xbe>
 70e:	00 97       	sbiw	r24, 0x00	; 0
 710:	71 f0       	breq	.+28     	; 0x72e <SMTick3+0xd0>
 712:	81 30       	cpi	r24, 0x01	; 1
 714:	91 05       	cpc	r25, r1
 716:	09 f0       	breq	.+2      	; 0x71a <SMTick3+0xbc>
 718:	04 c1       	rjmp	.+520    	; 0x922 <SMTick3+0x2c4>
 71a:	23 c0       	rjmp	.+70     	; 0x762 <SMTick3+0x104>
 71c:	83 30       	cpi	r24, 0x03	; 3
 71e:	91 05       	cpc	r25, r1
 720:	09 f4       	brne	.+2      	; 0x724 <SMTick3+0xc6>
 722:	c4 c0       	rjmp	.+392    	; 0x8ac <SMTick3+0x24e>
 724:	84 30       	cpi	r24, 0x04	; 4
 726:	91 05       	cpc	r25, r1
 728:	09 f0       	breq	.+2      	; 0x72c <SMTick3+0xce>
 72a:	fb c0       	rjmp	.+502    	; 0x922 <SMTick3+0x2c4>
 72c:	cd c0       	rjmp	.+410    	; 0x8c8 <SMTick3+0x26a>
		case MENU:
			if(tick == 1) {
 72e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <tick.2209>
 732:	81 30       	cpi	r24, 0x01	; 1
 734:	09 f0       	breq	.+2      	; 0x738 <SMTick3+0xda>
 736:	d9 c0       	rjmp	.+434    	; 0x8ea <SMTick3+0x28c>
 738:	ec e6       	ldi	r30, 0x6C	; 108
 73a:	f1 e0       	ldi	r31, 0x01	; 1
 73c:	a4 e6       	ldi	r26, 0x64	; 100
 73e:	b1 e0       	ldi	r27, 0x01	; 1
 740:	84 e7       	ldi	r24, 0x74	; 116
 742:	91 e0       	ldi	r25, 0x01	; 1
				for(i = 0; i < 8; i++) {
					placedBlocks[i] = 0;
 744:	11 92       	st	Z+, r1
					currentBlocks[i] = 0;
 746:	1d 92       	st	X+, r1
	}
	uc i;
	switch(state) {
		case MENU:
			if(tick == 1) {
				for(i = 0; i < 8; i++) {
 748:	e8 17       	cp	r30, r24
 74a:	f9 07       	cpc	r31, r25
					placedBlocks[i] = 0;
					currentBlocks[i] = 0;
				}
				LCD_ClearScreen();
 74c:	d9 f7       	brne	.-10     	; 0x744 <SMTick3+0xe6>
 74e:	e7 dc       	rcall	.-1586   	; 0x11e <LCD_ClearScreen>
				LCD_DisplayString(1, "Play/Difficulty");
 750:	6a e0       	ldi	r22, 0x0A	; 10
 752:	71 e0       	ldi	r23, 0x01	; 1
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	06 dd       	rcall	.-1524   	; 0x164 <LCD_DisplayString>
				tick = 0;
 758:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <tick.2209>
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	e0 c0       	rjmp	.+448    	; 0x922 <SMTick3+0x2c4>
			}
			break;
		case PLAY:
			if(currentBlocks[currentRow] & 0x80) {
 762:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <currentRow.2205>
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	fc 01       	movw	r30, r24
 76a:	ec 59       	subi	r30, 0x9C	; 156
 76c:	fe 4f       	sbci	r31, 0xFE	; 254
 76e:	20 81       	ld	r18, Z
 770:	22 23       	and	r18, r18
 772:	1c f4       	brge	.+6      	; 0x77a <SMTick3+0x11c>
				direction = 0;
 774:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <direction.2207>
 778:	12 c0       	rjmp	.+36     	; 0x79e <SMTick3+0x140>
			}
			else if(currentBlocks[currentRow] & 0x01) {
 77a:	20 ff       	sbrs	r18, 0
 77c:	04 c0       	rjmp	.+8      	; 0x786 <SMTick3+0x128>
				direction = 1;
 77e:	31 e0       	ldi	r19, 0x01	; 1
 780:	30 93 5a 01 	sts	0x015A, r19	; 0x80015a <direction.2207>
 784:	04 c0       	rjmp	.+8      	; 0x78e <SMTick3+0x130>
			}
			if(direction) {//Right
 786:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <direction.2207>
 78a:	33 23       	and	r19, r19
 78c:	41 f0       	breq	.+16     	; 0x79e <SMTick3+0x140>
				currentBlocks[currentRow] = currentBlocks[currentRow] << 1;
 78e:	fc 01       	movw	r30, r24
 790:	ec 59       	subi	r30, 0x9C	; 156
 792:	fe 4f       	sbci	r31, 0xFE	; 254
 794:	22 0f       	add	r18, r18
 796:	20 83       	st	Z, r18
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	c2 c0       	rjmp	.+388    	; 0x922 <SMTick3+0x2c4>
			}
			else {//Left
				currentBlocks[currentRow] = currentBlocks[currentRow] >> 1;
 79e:	fc 01       	movw	r30, r24
 7a0:	ec 59       	subi	r30, 0x9C	; 156
 7a2:	fe 4f       	sbci	r31, 0xFE	; 254
 7a4:	26 95       	lsr	r18
 7a6:	20 83       	st	Z, r18
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	ba c0       	rjmp	.+372    	; 0x922 <SMTick3+0x2c4>
			}
			break;
		case CHECK:
			if(currentRow == 7) {
 7ae:	c0 91 5d 01 	lds	r28, 0x015D	; 0x80015d <currentRow.2205>
 7b2:	c7 30       	cpi	r28, 0x07	; 7
 7b4:	f9 f4       	brne	.+62     	; 0x7f4 <SMTick3+0x196>
				currentRow = 6;
 7b6:	86 e0       	ldi	r24, 0x06	; 6
 7b8:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <currentRow.2205>
				placedBlocks[7] = currentBlocks[7];
 7bc:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <currentBlocks+0x7>
 7c0:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <placedBlocks+0x7>
				if (difficulty == 3) {
 7c4:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <difficulty.2208>
 7c8:	83 30       	cpi	r24, 0x03	; 3
 7ca:	31 f4       	brne	.+12     	; 0x7d8 <SMTick3+0x17a>
					currentBlocks[6] = 0x07;
 7cc:	87 e0       	ldi	r24, 0x07	; 7
 7ce:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <currentBlocks+0x6>
 7d2:	82 e0       	ldi	r24, 0x02	; 2
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	a5 c0       	rjmp	.+330    	; 0x922 <SMTick3+0x2c4>
				}
				else if (difficulty == 2) {
 7d8:	82 30       	cpi	r24, 0x02	; 2
 7da:	31 f4       	brne	.+12     	; 0x7e8 <SMTick3+0x18a>
					currentBlocks[6] = 0x18;
 7dc:	88 e1       	ldi	r24, 0x18	; 24
 7de:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <currentBlocks+0x6>
 7e2:	82 e0       	ldi	r24, 0x02	; 2
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	9d c0       	rjmp	.+314    	; 0x922 <SMTick3+0x2c4>
				}
				else {
					currentBlocks[6] = 0x10;
 7e8:	80 e1       	ldi	r24, 0x10	; 16
 7ea:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <currentBlocks+0x6>
 7ee:	82 e0       	ldi	r24, 0x02	; 2
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	97 c0       	rjmp	.+302    	; 0x922 <SMTick3+0x2c4>
				}
			}
			else if(currentRow == 0) {
 7f4:	c1 11       	cpse	r28, r1
 7f6:	0c c0       	rjmp	.+24     	; 0x810 <SMTick3+0x1b2>
				if(checkPlacement(placedBlocks[currentRow - 1], currentBlocks[currentRow], currentSize)) {
 7f8:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <currentSize.2206>
 7fc:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <currentBlocks>
 800:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <currentBlocks+0x7>
 804:	ed de       	rcall	.-550    	; 0x5e0 <checkPlacement>
 806:	81 11       	cpse	r24, r1
 808:	73 c0       	rjmp	.+230    	; 0x8f0 <SMTick3+0x292>
					state = WIN;
				}
				else {
					state = LOSE;
 80a:	84 e0       	ldi	r24, 0x04	; 4
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	89 c0       	rjmp	.+274    	; 0x922 <SMTick3+0x2c4>
				}
			}
			else {
				//If placement is valid, continue. ValidPlaced stores 
				uc validPlaced = checkPlacement(placedBlocks[currentRow + 1], currentBlocks[currentRow], currentSize);
 810:	0c 2f       	mov	r16, r28
 812:	10 e0       	ldi	r17, 0x00	; 0
 814:	f8 01       	movw	r30, r16
 816:	ec 59       	subi	r30, 0x9C	; 156
 818:	fe 4f       	sbci	r31, 0xFE	; 254
 81a:	d0 81       	ld	r29, Z
 81c:	f8 01       	movw	r30, r16
 81e:	e4 59       	subi	r30, 0x94	; 148
 820:	fe 4f       	sbci	r31, 0xFE	; 254
 822:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <currentSize.2206>
 826:	6d 2f       	mov	r22, r29
 828:	81 81       	ldd	r24, Z+1	; 0x01
 82a:	da de       	rcall	.-588    	; 0x5e0 <checkPlacement>
				if(validPlaced) {
 82c:	88 23       	and	r24, r24
 82e:	d1 f1       	breq	.+116    	; 0x8a4 <SMTick3+0x246>
					placedBlocks[currentRow] = currentBlocks[currentRow];
 830:	f8 01       	movw	r30, r16
 832:	e4 59       	subi	r30, 0x94	; 148
 834:	fe 4f       	sbci	r31, 0xFE	; 254
 836:	d0 83       	st	Z, r29
					currentRow--;
 838:	ef ef       	ldi	r30, 0xFF	; 255
 83a:	ec 0f       	add	r30, r28
 83c:	e0 93 5d 01 	sts	0x015D, r30	; 0x80015d <currentRow.2205>
					if(currentRow == 6) {
 840:	e6 30       	cpi	r30, 0x06	; 6
 842:	19 f4       	brne	.+6      	; 0x84a <SMTick3+0x1ec>
						currentSize = validPlaced;
 844:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <currentSize.2206>
 848:	0f c0       	rjmp	.+30     	; 0x868 <SMTick3+0x20a>
					}
					else if(currentRow >= 3) {
 84a:	e3 30       	cpi	r30, 0x03	; 3
 84c:	48 f0       	brcs	.+18     	; 0x860 <SMTick3+0x202>
						if(validPlaced > 2) {
 84e:	83 30       	cpi	r24, 0x03	; 3
 850:	20 f0       	brcs	.+8      	; 0x85a <SMTick3+0x1fc>
							currentSize = 2;
 852:	82 e0       	ldi	r24, 0x02	; 2
 854:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <currentSize.2206>
 858:	15 c0       	rjmp	.+42     	; 0x884 <SMTick3+0x226>
						}
						else {
							currentSize = validPlaced;
 85a:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <currentSize.2206>
 85e:	04 c0       	rjmp	.+8      	; 0x868 <SMTick3+0x20a>
						}
					}
					else {
						currentSize = 1;
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <currentSize.2206>
 866:	16 c0       	rjmp	.+44     	; 0x894 <SMTick3+0x236>
					}
					
					if(currentSize == 3) {
 868:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <currentSize.2206>
 86c:	83 30       	cpi	r24, 0x03	; 3
 86e:	41 f4       	brne	.+16     	; 0x880 <SMTick3+0x222>
						currentBlocks[currentRow] = 0x38;
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	ec 59       	subi	r30, 0x9C	; 156
 874:	fe 4f       	sbci	r31, 0xFE	; 254
 876:	88 e3       	ldi	r24, 0x38	; 56
 878:	80 83       	st	Z, r24
 87a:	82 e0       	ldi	r24, 0x02	; 2
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	51 c0       	rjmp	.+162    	; 0x922 <SMTick3+0x2c4>
					}
					else if(currentSize == 2) {
 880:	82 30       	cpi	r24, 0x02	; 2
 882:	41 f4       	brne	.+16     	; 0x894 <SMTick3+0x236>
						currentBlocks[currentRow] = 0x18;
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	ec 59       	subi	r30, 0x9C	; 156
 888:	fe 4f       	sbci	r31, 0xFE	; 254
 88a:	88 e1       	ldi	r24, 0x18	; 24
 88c:	80 83       	st	Z, r24
 88e:	82 e0       	ldi	r24, 0x02	; 2
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	47 c0       	rjmp	.+142    	; 0x922 <SMTick3+0x2c4>
					}
					else {
						currentBlocks[currentRow] = 0x08;
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	ec 59       	subi	r30, 0x9C	; 156
 898:	fe 4f       	sbci	r31, 0xFE	; 254
 89a:	88 e0       	ldi	r24, 0x08	; 8
 89c:	80 83       	st	Z, r24
 89e:	82 e0       	ldi	r24, 0x02	; 2
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	3f c0       	rjmp	.+126    	; 0x922 <SMTick3+0x2c4>
					}
				}
				else {
					PORTA = PORTA | 0x80;
 8a4:	17 9a       	sbi	0x02, 7	; 2
					state = LOSE;
 8a6:	84 e0       	ldi	r24, 0x04	; 4
 8a8:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			break;
		case WIN:
			//Write to LCD YOU WIN!
			if(tick == 1) {
 8aa:	3b c0       	rjmp	.+118    	; 0x922 <SMTick3+0x2c4>
 8ac:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <tick.2209>
				LCD_ClearScreen();
 8b0:	81 30       	cpi	r24, 0x01	; 1
 8b2:	09 f5       	brne	.+66     	; 0x8f6 <SMTick3+0x298>
				LCD_DisplayString(1, "YOU WIN!");
 8b4:	34 dc       	rcall	.-1944   	; 0x11e <LCD_ClearScreen>
 8b6:	6a e1       	ldi	r22, 0x1A	; 26
 8b8:	71 e0       	ldi	r23, 0x01	; 1
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	53 dc       	rcall	.-1882   	; 0x164 <LCD_DisplayString>
				tick = 0;
 8be:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <tick.2209>
 8c2:	83 e0       	ldi	r24, 0x03	; 3
 8c4:	90 e0       	ldi	r25, 0x00	; 0
			}
			break;
		case LOSE:
			//Write to LCD YOU LOSE
			if(tick == 1) {
 8c6:	2d c0       	rjmp	.+90     	; 0x922 <SMTick3+0x2c4>
 8c8:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <tick.2209>
				LCD_ClearScreen();
 8cc:	81 30       	cpi	r24, 0x01	; 1
 8ce:	b1 f4       	brne	.+44     	; 0x8fc <SMTick3+0x29e>
				LCD_DisplayString(1, "YOU LOSE");
 8d0:	26 dc       	rcall	.-1972   	; 0x11e <LCD_ClearScreen>
 8d2:	63 e2       	ldi	r22, 0x23	; 35
 8d4:	71 e0       	ldi	r23, 0x01	; 1
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	45 dc       	rcall	.-1910   	; 0x164 <LCD_DisplayString>
				tick = 0;
 8da:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <tick.2209>
 8de:	84 e0       	ldi	r24, 0x04	; 4
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	1f c0       	rjmp	.+62     	; 0x922 <SMTick3+0x2c4>
						currentBlocks[7] = 0x10;
					}
				}
			}
			else if(difficultyButton) {
				state = DIFFICULTY_SELECT;
 8e4:	86 e0       	ldi	r24, 0x06	; 6
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	1c c0       	rjmp	.+56     	; 0x922 <SMTick3+0x2c4>
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	19 c0       	rjmp	.+50     	; 0x922 <SMTick3+0x2c4>
					currentBlocks[6] = 0x10;
				}
			}
			else if(currentRow == 0) {
				if(checkPlacement(placedBlocks[currentRow - 1], currentBlocks[currentRow], currentSize)) {
					state = WIN;
 8f0:	83 e0       	ldi	r24, 0x03	; 3
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	16 c0       	rjmp	.+44     	; 0x922 <SMTick3+0x2c4>
 8f6:	83 e0       	ldi	r24, 0x03	; 3
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	13 c0       	rjmp	.+38     	; 0x922 <SMTick3+0x2c4>
 8fc:	84 e0       	ldi	r24, 0x04	; 4
 8fe:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			break;
	}
	
	return state;
 900:	10 c0       	rjmp	.+32     	; 0x922 <SMTick3+0x2c4>
	switch(state) {
		case MENU:
			if(playButton) {
				play = 1;
			}
			if(play) {
 902:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <play.2204>
 906:	88 23       	and	r24, r24
 908:	09 f4       	brne	.+2      	; 0x90c <SMTick3+0x2ae>
 90a:	dd ce       	rjmp	.-582    	; 0x6c6 <SMTick3+0x68>
 90c:	be ce       	rjmp	.-644    	; 0x68a <SMTick3+0x2c>
		case WIN:
			//Nothing
			if(playButton) {
				play = 1;
			}
			if(play) {
 90e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <play.2204>
 912:	88 23       	and	r24, r24
 914:	59 f2       	breq	.-106    	; 0x8ac <SMTick3+0x24e>
 916:	e6 ce       	rjmp	.-564    	; 0x6e4 <SMTick3+0x86>
		case LOSE:
			//Nothing
			if(playButton) {
				play = 1;
			}
			if(play) {
 918:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <play.2204>
 91c:	88 23       	and	r24, r24
 91e:	a1 f2       	breq	.-88     	; 0x8c8 <SMTick3+0x26a>
 920:	ea ce       	rjmp	.-556    	; 0x6f6 <SMTick3+0x98>
		default:
			break;
	}
	
	return state;
}
 922:	df 91       	pop	r29
 924:	cf 91       	pop	r28
 926:	1f 91       	pop	r17
 928:	0f 91       	pop	r16
 92a:	08 95       	ret

0000092c <main>:

int main(void)
{
 92c:	cf 93       	push	r28
 92e:	df 93       	push	r29
 930:	00 d0       	rcall	.+0      	; 0x932 <main+0x6>
 932:	00 d0       	rcall	.+0      	; 0x934 <main+0x8>
 934:	00 d0       	rcall	.+0      	; 0x936 <main+0xa>
 936:	cd b7       	in	r28, 0x3d	; 61
 938:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0xFF; PORTA = 0x00; //LCD Control Lines
 93a:	8f ef       	ldi	r24, 0xFF	; 255
 93c:	81 b9       	out	0x01, r24	; 1
 93e:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00; //Shift Register
 940:	84 b9       	out	0x04, r24	; 4
 942:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x00; PORTC = 0xFF; //INPUTS
 944:	17 b8       	out	0x07, r1	; 7
 946:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF; PORTD = 0x00; //LCD Data Lines
 948:	8a b9       	out	0x0a, r24	; 10
 94a:	1b b8       	out	0x0b, r1	; 11
 94c:	0f 2e       	mov	r0, r31
 94e:	f4 e6       	ldi	r31, 0x64	; 100
 950:	ef 2e       	mov	r14, r31
 952:	f0 2d       	mov	r31, r0
 954:	f1 2c       	mov	r15, r1
 956:	00 e0       	ldi	r16, 0x00	; 0
 958:	10 e0       	ldi	r17, 0x00	; 0
 95a:	52 e0       	ldi	r21, 0x02	; 2
 95c:	40 e0       	ldi	r20, 0x00	; 0
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	20 e0       	ldi	r18, 0x00	; 0
 962:	04 c0       	rjmp	.+8      	; 0x96c <main+0x40>
	unsigned long int c;
	while(1){
		c = a % b;
		if( c == 0 ) { return b; }
		a = b;
		b = c;
 964:	e6 2e       	mov	r14, r22
 966:	f7 2e       	mov	r15, r23
 968:	08 2f       	mov	r16, r24
 96a:	19 2f       	mov	r17, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 96c:	65 2f       	mov	r22, r21
 96e:	74 2f       	mov	r23, r20
 970:	83 2f       	mov	r24, r19
 972:	92 2f       	mov	r25, r18
 974:	2e 2d       	mov	r18, r14
 976:	3f 2d       	mov	r19, r15
 978:	40 2f       	mov	r20, r16
 97a:	51 2f       	mov	r21, r17
 97c:	29 d2       	rcall	.+1106   	; 0xdd0 <__udivmodsi4>
 97e:	5e 2d       	mov	r21, r14
 980:	4f 2d       	mov	r20, r15
 982:	30 2f       	mov	r19, r16
 984:	21 2f       	mov	r18, r17
		if( c == 0 ) { return b; }
 986:	61 15       	cp	r22, r1
 988:	71 05       	cpc	r23, r1
 98a:	81 05       	cpc	r24, r1
 98c:	91 05       	cpc	r25, r1
 98e:	51 f7       	brne	.-44     	; 0x964 <main+0x38>
	//Calculating GCD
	ul int GCD = findGCD(SMTick1_calc, SMTick2_calc);
	GCD = findGCD(GCD, SMTick3_calc);
	
	//Recalculate GCD periods for scheduler
	ul int SMTick1_period = SMTick1_calc/GCD;
 990:	68 ec       	ldi	r22, 0xC8	; 200
 992:	70 e0       	ldi	r23, 0x00	; 0
 994:	80 e0       	ldi	r24, 0x00	; 0
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	2e 2d       	mov	r18, r14
 99a:	3f 2d       	mov	r19, r15
 99c:	40 2f       	mov	r20, r16
 99e:	51 2f       	mov	r21, r17
 9a0:	17 d2       	rcall	.+1070   	; 0xdd0 <__udivmodsi4>
 9a2:	29 01       	movw	r4, r18
 9a4:	3a 01       	movw	r6, r20
	ul int SMTick2_period = SMTick2_calc/GCD;
 9a6:	62 e0       	ldi	r22, 0x02	; 2
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	80 e0       	ldi	r24, 0x00	; 0
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	2e 2d       	mov	r18, r14
 9b0:	3f 2d       	mov	r19, r15
 9b2:	40 2f       	mov	r20, r16
 9b4:	51 2f       	mov	r21, r17
 9b6:	0c d2       	rcall	.+1048   	; 0xdd0 <__udivmodsi4>
 9b8:	49 01       	movw	r8, r18
 9ba:	5a 01       	movw	r10, r20
	ul int SMTick3_period = SMTick3_calc/GCD;
 9bc:	64 e6       	ldi	r22, 0x64	; 100
 9be:	70 e0       	ldi	r23, 0x00	; 0
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	2e 2d       	mov	r18, r14
 9c6:	3f 2d       	mov	r19, r15
 9c8:	40 2f       	mov	r20, r16
 9ca:	51 2f       	mov	r21, r17
 9cc:	01 d2       	rcall	.+1026   	; 0xdd0 <__udivmodsi4>
	
	//Array of Tasks
	static task task1;
	static task task2;
	static task task3;
	task *tasks[] = { &task1, &task2, &task3 };
 9ce:	86 e0       	ldi	r24, 0x06	; 6
 9d0:	e4 e0       	ldi	r30, 0x04	; 4
 9d2:	f1 e0       	ldi	r31, 0x01	; 1
 9d4:	de 01       	movw	r26, r28
 9d6:	11 96       	adiw	r26, 0x01	; 1
 9d8:	01 90       	ld	r0, Z+
 9da:	0d 92       	st	X+, r0
 9dc:	8a 95       	dec	r24
 9de:	e1 f7       	brne	.-8      	; 0x9d8 <main+0xac>
	const us numTasks = sizeof(tasks)/sizeof(task*);
	
	//Task 1
	task1.state = -1; //Init
 9e0:	ee e4       	ldi	r30, 0x4E	; 78
 9e2:	f1 e0       	ldi	r31, 0x01	; 1
 9e4:	6f ef       	ldi	r22, 0xFF	; 255
 9e6:	60 83       	st	Z, r22
	task1.period = SMTick1_period;
 9e8:	41 82       	std	Z+1, r4	; 0x01
 9ea:	52 82       	std	Z+2, r5	; 0x02
 9ec:	63 82       	std	Z+3, r6	; 0x03
 9ee:	74 82       	std	Z+4, r7	; 0x04
	task1.elapsedTime = SMTick1_period;
 9f0:	45 82       	std	Z+5, r4	; 0x05
 9f2:	56 82       	std	Z+6, r5	; 0x06
 9f4:	67 82       	std	Z+7, r6	; 0x07
 9f6:	70 86       	std	Z+8, r7	; 0x08
	task1.TickFct = &SMTick1;
 9f8:	87 ea       	ldi	r24, 0xA7	; 167
 9fa:	91 e0       	ldi	r25, 0x01	; 1
 9fc:	92 87       	std	Z+10, r25	; 0x0a
 9fe:	81 87       	std	Z+9, r24	; 0x09
	
	//Task 2
	task2.state = -1; //Init
 a00:	e3 e4       	ldi	r30, 0x43	; 67
 a02:	f1 e0       	ldi	r31, 0x01	; 1
 a04:	60 83       	st	Z, r22
	task2.period = SMTick2_period;
 a06:	81 82       	std	Z+1, r8	; 0x01
 a08:	92 82       	std	Z+2, r9	; 0x02
 a0a:	a3 82       	std	Z+3, r10	; 0x03
 a0c:	b4 82       	std	Z+4, r11	; 0x04
	task2.elapsedTime = SMTick2_period;
 a0e:	85 82       	std	Z+5, r8	; 0x05
 a10:	96 82       	std	Z+6, r9	; 0x06
 a12:	a7 82       	std	Z+7, r10	; 0x07
 a14:	b0 86       	std	Z+8, r11	; 0x08
	task2.TickFct = &SMTick2;
 a16:	8f e5       	ldi	r24, 0x5F	; 95
 a18:	92 e0       	ldi	r25, 0x02	; 2
 a1a:	92 87       	std	Z+10, r25	; 0x0a
 a1c:	81 87       	std	Z+9, r24	; 0x09
	
	//Task 3
	task3.state = -1; //Init
 a1e:	e8 e3       	ldi	r30, 0x38	; 56
 a20:	f1 e0       	ldi	r31, 0x01	; 1
 a22:	60 83       	st	Z, r22
	task3.period = SMTick3_period;
 a24:	21 83       	std	Z+1, r18	; 0x01
 a26:	32 83       	std	Z+2, r19	; 0x02
 a28:	43 83       	std	Z+3, r20	; 0x03
 a2a:	54 83       	std	Z+4, r21	; 0x04
	task3.elapsedTime = SMTick3_period;
 a2c:	25 83       	std	Z+5, r18	; 0x05
 a2e:	36 83       	std	Z+6, r19	; 0x06
 a30:	47 83       	std	Z+7, r20	; 0x07
 a32:	50 87       	std	Z+8, r21	; 0x08
	task3.TickFct = &SMTick3;
 a34:	8f e2       	ldi	r24, 0x2F	; 47
 a36:	93 e0       	ldi	r25, 0x03	; 3
 a38:	92 87       	std	Z+10, r25	; 0x0a
	
	PWM_on();
 a3a:	81 87       	std	Z+9, r24	; 0x09
	TimerSet(GCD);
 a3c:	1a dd       	rcall	.-1484   	; 0x472 <PWM_on>
 a3e:	6e 2d       	mov	r22, r14
 a40:	7f 2d       	mov	r23, r15
 a42:	80 2f       	mov	r24, r16
	TimerOn();
 a44:	91 2f       	mov	r25, r17
	
	LCD_init();
 a46:	a7 db       	rcall	.-2226   	; 0x196 <TimerSet>
 a48:	b7 db       	rcall	.-2194   	; 0x1b8 <TimerOn>
	LCD_DisplayString(1, "PRESS START");
 a4a:	74 db       	rcall	.-2328   	; 0x134 <LCD_init>
 a4c:	6c e2       	ldi	r22, 0x2C	; 44
 a4e:	71 e0       	ldi	r23, 0x01	; 1
 a50:	81 e0       	ldi	r24, 0x01	; 1
 a52:	88 db       	rcall	.-2288   	; 0x164 <LCD_DisplayString>
	
	clear_data();
 a54:	2f dd       	rcall	.-1442   	; 0x4b4 <clear_data>
 a56:	2e dd       	rcall	.-1444   	; 0x4b4 <clear_data>
	clear_data();
 a58:	7e 01       	movw	r14, r28
 a5a:	87 e0       	ldi	r24, 0x07	; 7
 a5c:	e8 0e       	add	r14, r24
 a5e:	f1 1c       	adc	r15, r1
 a60:	de 01       	movw	r26, r28
 a62:	11 96       	adiw	r26, 0x01	; 1
 a64:	6d 01       	movw	r12, r26
 a66:	f6 01       	movw	r30, r12
 a68:	01 91       	ld	r16, Z+
    while (1) 
    {
		//Scheduler code
		for (i = 0; i < numTasks; i++) {
			//Task ready to tick
			if (tasks[i]->elapsedTime >= tasks[i]->period) {
 a6a:	11 91       	ld	r17, Z+
 a6c:	6f 01       	movw	r12, r30
 a6e:	d8 01       	movw	r26, r16
 a70:	15 96       	adiw	r26, 0x05	; 5
 a72:	4d 91       	ld	r20, X+
 a74:	5d 91       	ld	r21, X+
 a76:	6d 91       	ld	r22, X+
 a78:	7c 91       	ld	r23, X
 a7a:	18 97       	sbiw	r26, 0x08	; 8
 a7c:	11 96       	adiw	r26, 0x01	; 1
 a7e:	8d 91       	ld	r24, X+
 a80:	9d 91       	ld	r25, X+
 a82:	0d 90       	ld	r0, X+
 a84:	bc 91       	ld	r27, X
 a86:	a0 2d       	mov	r26, r0
 a88:	48 17       	cp	r20, r24
 a8a:	59 07       	cpc	r21, r25
 a8c:	6a 07       	cpc	r22, r26
 a8e:	7b 07       	cpc	r23, r27
 a90:	80 f0       	brcs	.+32     	; 0xab2 <main+0x186>
 a92:	f8 01       	movw	r30, r16
 a94:	80 81       	ld	r24, Z
				//Setup next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 a96:	01 84       	ldd	r0, Z+9	; 0x09
 a98:	f2 85       	ldd	r31, Z+10	; 0x0a
 a9a:	e0 2d       	mov	r30, r0
 a9c:	08 2e       	mov	r0, r24
 a9e:	00 0c       	add	r0, r0
 aa0:	99 0b       	sbc	r25, r25
 aa2:	09 95       	icall
 aa4:	d8 01       	movw	r26, r16
 aa6:	8c 93       	st	X, r24
 aa8:	f8 01       	movw	r30, r16
 aaa:	15 82       	std	Z+5, r1	; 0x05
				//Reset elapsed time for next tick
				tasks[i]->elapsedTime = 0;
 aac:	16 82       	std	Z+6, r1	; 0x06
 aae:	17 82       	std	Z+7, r1	; 0x07
 ab0:	10 86       	std	Z+8, r1	; 0x08
 ab2:	f8 01       	movw	r30, r16
 ab4:	85 81       	ldd	r24, Z+5	; 0x05
			}
			tasks[i]->elapsedTime +=1;
 ab6:	96 81       	ldd	r25, Z+6	; 0x06
 ab8:	a7 81       	ldd	r26, Z+7	; 0x07
 aba:	b0 85       	ldd	r27, Z+8	; 0x08
 abc:	01 96       	adiw	r24, 0x01	; 1
 abe:	a1 1d       	adc	r26, r1
 ac0:	b1 1d       	adc	r27, r1
 ac2:	85 83       	std	Z+5, r24	; 0x05
 ac4:	96 83       	std	Z+6, r25	; 0x06
 ac6:	a7 83       	std	Z+7, r26	; 0x07
 ac8:	b0 87       	std	Z+8, r27	; 0x08
 aca:	ce 14       	cp	r12, r14
 acc:	df 04       	cpc	r13, r15
	
	us i; //Loop iterator
    while (1) 
    {
		//Scheduler code
		for (i = 0; i < numTasks; i++) {
 ace:	59 f6       	brne	.-106    	; 0xa66 <main+0x13a>
 ad0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <TimerFlag>
				//Reset elapsed time for next tick
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime +=1;
		}
		while(!TimerFlag);
 ad4:	88 23       	and	r24, r24
 ad6:	e1 f3       	breq	.-8      	; 0xad0 <main+0x1a4>
 ad8:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <TimerFlag>
		TimerFlag = 0;
 adc:	c1 cf       	rjmp	.-126    	; 0xa60 <main+0x134>

00000ade <__cmpsf2>:
 ade:	9c d0       	rcall	.+312    	; 0xc18 <__fp_cmp>
	}
 ae0:	08 f4       	brcc	.+2      	; 0xae4 <__cmpsf2+0x6>
 ae2:	81 e0       	ldi	r24, 0x01	; 1
 ae4:	08 95       	ret

00000ae6 <__divsf3>:
 ae6:	0c d0       	rcall	.+24     	; 0xb00 <__divsf3x>
 ae8:	d2 c0       	rjmp	.+420    	; 0xc8e <__fp_round>
 aea:	ca d0       	rcall	.+404    	; 0xc80 <__fp_pscB>
 aec:	40 f0       	brcs	.+16     	; 0xafe <__divsf3+0x18>
 aee:	c1 d0       	rcall	.+386    	; 0xc72 <__fp_pscA>
 af0:	30 f0       	brcs	.+12     	; 0xafe <__divsf3+0x18>
 af2:	21 f4       	brne	.+8      	; 0xafc <__divsf3+0x16>
 af4:	5f 3f       	cpi	r21, 0xFF	; 255
 af6:	19 f0       	breq	.+6      	; 0xafe <__divsf3+0x18>
 af8:	b3 c0       	rjmp	.+358    	; 0xc60 <__fp_inf>
 afa:	51 11       	cpse	r21, r1
 afc:	fc c0       	rjmp	.+504    	; 0xcf6 <__fp_szero>
 afe:	b6 c0       	rjmp	.+364    	; 0xc6c <__fp_nan>

00000b00 <__divsf3x>:
 b00:	d7 d0       	rcall	.+430    	; 0xcb0 <__fp_split3>
 b02:	98 f3       	brcs	.-26     	; 0xaea <__divsf3+0x4>

00000b04 <__divsf3_pse>:
 b04:	99 23       	and	r25, r25
 b06:	c9 f3       	breq	.-14     	; 0xafa <__divsf3+0x14>
 b08:	55 23       	and	r21, r21
 b0a:	b1 f3       	breq	.-20     	; 0xaf8 <__divsf3+0x12>
 b0c:	95 1b       	sub	r25, r21
 b0e:	55 0b       	sbc	r21, r21
 b10:	bb 27       	eor	r27, r27
 b12:	aa 27       	eor	r26, r26
 b14:	62 17       	cp	r22, r18
 b16:	73 07       	cpc	r23, r19
 b18:	84 07       	cpc	r24, r20
 b1a:	38 f0       	brcs	.+14     	; 0xb2a <__divsf3_pse+0x26>
 b1c:	9f 5f       	subi	r25, 0xFF	; 255
 b1e:	5f 4f       	sbci	r21, 0xFF	; 255
 b20:	22 0f       	add	r18, r18
 b22:	33 1f       	adc	r19, r19
 b24:	44 1f       	adc	r20, r20
 b26:	aa 1f       	adc	r26, r26
 b28:	a9 f3       	breq	.-22     	; 0xb14 <__divsf3_pse+0x10>
 b2a:	33 d0       	rcall	.+102    	; 0xb92 <__divsf3_pse+0x8e>
 b2c:	0e 2e       	mov	r0, r30
 b2e:	3a f0       	brmi	.+14     	; 0xb3e <__divsf3_pse+0x3a>
 b30:	e0 e8       	ldi	r30, 0x80	; 128
 b32:	30 d0       	rcall	.+96     	; 0xb94 <__divsf3_pse+0x90>
 b34:	91 50       	subi	r25, 0x01	; 1
 b36:	50 40       	sbci	r21, 0x00	; 0
 b38:	e6 95       	lsr	r30
 b3a:	00 1c       	adc	r0, r0
 b3c:	ca f7       	brpl	.-14     	; 0xb30 <__divsf3_pse+0x2c>
 b3e:	29 d0       	rcall	.+82     	; 0xb92 <__divsf3_pse+0x8e>
 b40:	fe 2f       	mov	r31, r30
 b42:	27 d0       	rcall	.+78     	; 0xb92 <__divsf3_pse+0x8e>
 b44:	66 0f       	add	r22, r22
 b46:	77 1f       	adc	r23, r23
 b48:	88 1f       	adc	r24, r24
 b4a:	bb 1f       	adc	r27, r27
 b4c:	26 17       	cp	r18, r22
 b4e:	37 07       	cpc	r19, r23
 b50:	48 07       	cpc	r20, r24
 b52:	ab 07       	cpc	r26, r27
 b54:	b0 e8       	ldi	r27, 0x80	; 128
 b56:	09 f0       	breq	.+2      	; 0xb5a <__divsf3_pse+0x56>
 b58:	bb 0b       	sbc	r27, r27
 b5a:	80 2d       	mov	r24, r0
 b5c:	bf 01       	movw	r22, r30
 b5e:	ff 27       	eor	r31, r31
 b60:	93 58       	subi	r25, 0x83	; 131
 b62:	5f 4f       	sbci	r21, 0xFF	; 255
 b64:	2a f0       	brmi	.+10     	; 0xb70 <__divsf3_pse+0x6c>
 b66:	9e 3f       	cpi	r25, 0xFE	; 254
 b68:	51 05       	cpc	r21, r1
 b6a:	68 f0       	brcs	.+26     	; 0xb86 <__divsf3_pse+0x82>
 b6c:	79 c0       	rjmp	.+242    	; 0xc60 <__fp_inf>
 b6e:	c3 c0       	rjmp	.+390    	; 0xcf6 <__fp_szero>
 b70:	5f 3f       	cpi	r21, 0xFF	; 255
 b72:	ec f3       	brlt	.-6      	; 0xb6e <__divsf3_pse+0x6a>
 b74:	98 3e       	cpi	r25, 0xE8	; 232
 b76:	dc f3       	brlt	.-10     	; 0xb6e <__divsf3_pse+0x6a>
 b78:	86 95       	lsr	r24
 b7a:	77 95       	ror	r23
 b7c:	67 95       	ror	r22
 b7e:	b7 95       	ror	r27
 b80:	f7 95       	ror	r31
 b82:	9f 5f       	subi	r25, 0xFF	; 255
 b84:	c9 f7       	brne	.-14     	; 0xb78 <__divsf3_pse+0x74>
 b86:	88 0f       	add	r24, r24
 b88:	91 1d       	adc	r25, r1
 b8a:	96 95       	lsr	r25
 b8c:	87 95       	ror	r24
 b8e:	97 f9       	bld	r25, 7
 b90:	08 95       	ret
 b92:	e1 e0       	ldi	r30, 0x01	; 1
 b94:	66 0f       	add	r22, r22
 b96:	77 1f       	adc	r23, r23
 b98:	88 1f       	adc	r24, r24
 b9a:	bb 1f       	adc	r27, r27
 b9c:	62 17       	cp	r22, r18
 b9e:	73 07       	cpc	r23, r19
 ba0:	84 07       	cpc	r24, r20
 ba2:	ba 07       	cpc	r27, r26
 ba4:	20 f0       	brcs	.+8      	; 0xbae <__divsf3_pse+0xaa>
 ba6:	62 1b       	sub	r22, r18
 ba8:	73 0b       	sbc	r23, r19
 baa:	84 0b       	sbc	r24, r20
 bac:	ba 0b       	sbc	r27, r26
 bae:	ee 1f       	adc	r30, r30
 bb0:	88 f7       	brcc	.-30     	; 0xb94 <__divsf3_pse+0x90>
 bb2:	e0 95       	com	r30
 bb4:	08 95       	ret

00000bb6 <__fixsfsi>:
 bb6:	04 d0       	rcall	.+8      	; 0xbc0 <__fixunssfsi>
 bb8:	68 94       	set
 bba:	b1 11       	cpse	r27, r1
 bbc:	9c c0       	rjmp	.+312    	; 0xcf6 <__fp_szero>
 bbe:	08 95       	ret

00000bc0 <__fixunssfsi>:
 bc0:	7f d0       	rcall	.+254    	; 0xcc0 <__fp_splitA>
 bc2:	88 f0       	brcs	.+34     	; 0xbe6 <__fixunssfsi+0x26>
 bc4:	9f 57       	subi	r25, 0x7F	; 127
 bc6:	90 f0       	brcs	.+36     	; 0xbec <__fixunssfsi+0x2c>
 bc8:	b9 2f       	mov	r27, r25
 bca:	99 27       	eor	r25, r25
 bcc:	b7 51       	subi	r27, 0x17	; 23
 bce:	a0 f0       	brcs	.+40     	; 0xbf8 <__fixunssfsi+0x38>
 bd0:	d1 f0       	breq	.+52     	; 0xc06 <__fixunssfsi+0x46>
 bd2:	66 0f       	add	r22, r22
 bd4:	77 1f       	adc	r23, r23
 bd6:	88 1f       	adc	r24, r24
 bd8:	99 1f       	adc	r25, r25
 bda:	1a f0       	brmi	.+6      	; 0xbe2 <__fixunssfsi+0x22>
 bdc:	ba 95       	dec	r27
 bde:	c9 f7       	brne	.-14     	; 0xbd2 <__fixunssfsi+0x12>
 be0:	12 c0       	rjmp	.+36     	; 0xc06 <__fixunssfsi+0x46>
 be2:	b1 30       	cpi	r27, 0x01	; 1
 be4:	81 f0       	breq	.+32     	; 0xc06 <__fixunssfsi+0x46>
 be6:	86 d0       	rcall	.+268    	; 0xcf4 <__fp_zero>
 be8:	b1 e0       	ldi	r27, 0x01	; 1
 bea:	08 95       	ret
 bec:	83 c0       	rjmp	.+262    	; 0xcf4 <__fp_zero>
 bee:	67 2f       	mov	r22, r23
 bf0:	78 2f       	mov	r23, r24
 bf2:	88 27       	eor	r24, r24
 bf4:	b8 5f       	subi	r27, 0xF8	; 248
 bf6:	39 f0       	breq	.+14     	; 0xc06 <__fixunssfsi+0x46>
 bf8:	b9 3f       	cpi	r27, 0xF9	; 249
 bfa:	cc f3       	brlt	.-14     	; 0xbee <__fixunssfsi+0x2e>
 bfc:	86 95       	lsr	r24
 bfe:	77 95       	ror	r23
 c00:	67 95       	ror	r22
 c02:	b3 95       	inc	r27
 c04:	d9 f7       	brne	.-10     	; 0xbfc <__fixunssfsi+0x3c>
 c06:	3e f4       	brtc	.+14     	; 0xc16 <__fixunssfsi+0x56>
 c08:	90 95       	com	r25
 c0a:	80 95       	com	r24
 c0c:	70 95       	com	r23
 c0e:	61 95       	neg	r22
 c10:	7f 4f       	sbci	r23, 0xFF	; 255
 c12:	8f 4f       	sbci	r24, 0xFF	; 255
 c14:	9f 4f       	sbci	r25, 0xFF	; 255
 c16:	08 95       	ret

00000c18 <__fp_cmp>:
 c18:	99 0f       	add	r25, r25
 c1a:	00 08       	sbc	r0, r0
 c1c:	55 0f       	add	r21, r21
 c1e:	aa 0b       	sbc	r26, r26
 c20:	e0 e8       	ldi	r30, 0x80	; 128
 c22:	fe ef       	ldi	r31, 0xFE	; 254
 c24:	16 16       	cp	r1, r22
 c26:	17 06       	cpc	r1, r23
 c28:	e8 07       	cpc	r30, r24
 c2a:	f9 07       	cpc	r31, r25
 c2c:	c0 f0       	brcs	.+48     	; 0xc5e <__fp_cmp+0x46>
 c2e:	12 16       	cp	r1, r18
 c30:	13 06       	cpc	r1, r19
 c32:	e4 07       	cpc	r30, r20
 c34:	f5 07       	cpc	r31, r21
 c36:	98 f0       	brcs	.+38     	; 0xc5e <__fp_cmp+0x46>
 c38:	62 1b       	sub	r22, r18
 c3a:	73 0b       	sbc	r23, r19
 c3c:	84 0b       	sbc	r24, r20
 c3e:	95 0b       	sbc	r25, r21
 c40:	39 f4       	brne	.+14     	; 0xc50 <__fp_cmp+0x38>
 c42:	0a 26       	eor	r0, r26
 c44:	61 f0       	breq	.+24     	; 0xc5e <__fp_cmp+0x46>
 c46:	23 2b       	or	r18, r19
 c48:	24 2b       	or	r18, r20
 c4a:	25 2b       	or	r18, r21
 c4c:	21 f4       	brne	.+8      	; 0xc56 <__fp_cmp+0x3e>
 c4e:	08 95       	ret
 c50:	0a 26       	eor	r0, r26
 c52:	09 f4       	brne	.+2      	; 0xc56 <__fp_cmp+0x3e>
 c54:	a1 40       	sbci	r26, 0x01	; 1
 c56:	a6 95       	lsr	r26
 c58:	8f ef       	ldi	r24, 0xFF	; 255
 c5a:	81 1d       	adc	r24, r1
 c5c:	81 1d       	adc	r24, r1
 c5e:	08 95       	ret

00000c60 <__fp_inf>:
 c60:	97 f9       	bld	r25, 7
 c62:	9f 67       	ori	r25, 0x7F	; 127
 c64:	80 e8       	ldi	r24, 0x80	; 128
 c66:	70 e0       	ldi	r23, 0x00	; 0
 c68:	60 e0       	ldi	r22, 0x00	; 0
 c6a:	08 95       	ret

00000c6c <__fp_nan>:
 c6c:	9f ef       	ldi	r25, 0xFF	; 255
 c6e:	80 ec       	ldi	r24, 0xC0	; 192
 c70:	08 95       	ret

00000c72 <__fp_pscA>:
 c72:	00 24       	eor	r0, r0
 c74:	0a 94       	dec	r0
 c76:	16 16       	cp	r1, r22
 c78:	17 06       	cpc	r1, r23
 c7a:	18 06       	cpc	r1, r24
 c7c:	09 06       	cpc	r0, r25
 c7e:	08 95       	ret

00000c80 <__fp_pscB>:
 c80:	00 24       	eor	r0, r0
 c82:	0a 94       	dec	r0
 c84:	12 16       	cp	r1, r18
 c86:	13 06       	cpc	r1, r19
 c88:	14 06       	cpc	r1, r20
 c8a:	05 06       	cpc	r0, r21
 c8c:	08 95       	ret

00000c8e <__fp_round>:
 c8e:	09 2e       	mov	r0, r25
 c90:	03 94       	inc	r0
 c92:	00 0c       	add	r0, r0
 c94:	11 f4       	brne	.+4      	; 0xc9a <__fp_round+0xc>
 c96:	88 23       	and	r24, r24
 c98:	52 f0       	brmi	.+20     	; 0xcae <__fp_round+0x20>
 c9a:	bb 0f       	add	r27, r27
 c9c:	40 f4       	brcc	.+16     	; 0xcae <__fp_round+0x20>
 c9e:	bf 2b       	or	r27, r31
 ca0:	11 f4       	brne	.+4      	; 0xca6 <__fp_round+0x18>
 ca2:	60 ff       	sbrs	r22, 0
 ca4:	04 c0       	rjmp	.+8      	; 0xcae <__fp_round+0x20>
 ca6:	6f 5f       	subi	r22, 0xFF	; 255
 ca8:	7f 4f       	sbci	r23, 0xFF	; 255
 caa:	8f 4f       	sbci	r24, 0xFF	; 255
 cac:	9f 4f       	sbci	r25, 0xFF	; 255
 cae:	08 95       	ret

00000cb0 <__fp_split3>:
 cb0:	57 fd       	sbrc	r21, 7
 cb2:	90 58       	subi	r25, 0x80	; 128
 cb4:	44 0f       	add	r20, r20
 cb6:	55 1f       	adc	r21, r21
 cb8:	59 f0       	breq	.+22     	; 0xcd0 <__fp_splitA+0x10>
 cba:	5f 3f       	cpi	r21, 0xFF	; 255
 cbc:	71 f0       	breq	.+28     	; 0xcda <__fp_splitA+0x1a>
 cbe:	47 95       	ror	r20

00000cc0 <__fp_splitA>:
 cc0:	88 0f       	add	r24, r24
 cc2:	97 fb       	bst	r25, 7
 cc4:	99 1f       	adc	r25, r25
 cc6:	61 f0       	breq	.+24     	; 0xce0 <__fp_splitA+0x20>
 cc8:	9f 3f       	cpi	r25, 0xFF	; 255
 cca:	79 f0       	breq	.+30     	; 0xcea <__fp_splitA+0x2a>
 ccc:	87 95       	ror	r24
 cce:	08 95       	ret
 cd0:	12 16       	cp	r1, r18
 cd2:	13 06       	cpc	r1, r19
 cd4:	14 06       	cpc	r1, r20
 cd6:	55 1f       	adc	r21, r21
 cd8:	f2 cf       	rjmp	.-28     	; 0xcbe <__fp_split3+0xe>
 cda:	46 95       	lsr	r20
 cdc:	f1 df       	rcall	.-30     	; 0xcc0 <__fp_splitA>
 cde:	08 c0       	rjmp	.+16     	; 0xcf0 <__fp_splitA+0x30>
 ce0:	16 16       	cp	r1, r22
 ce2:	17 06       	cpc	r1, r23
 ce4:	18 06       	cpc	r1, r24
 ce6:	99 1f       	adc	r25, r25
 ce8:	f1 cf       	rjmp	.-30     	; 0xccc <__fp_splitA+0xc>
 cea:	86 95       	lsr	r24
 cec:	71 05       	cpc	r23, r1
 cee:	61 05       	cpc	r22, r1
 cf0:	08 94       	sec
 cf2:	08 95       	ret

00000cf4 <__fp_zero>:
 cf4:	e8 94       	clt

00000cf6 <__fp_szero>:
 cf6:	bb 27       	eor	r27, r27
 cf8:	66 27       	eor	r22, r22
 cfa:	77 27       	eor	r23, r23
 cfc:	cb 01       	movw	r24, r22
 cfe:	97 f9       	bld	r25, 7
 d00:	08 95       	ret

00000d02 <__gesf2>:
 d02:	8a df       	rcall	.-236    	; 0xc18 <__fp_cmp>
 d04:	08 f4       	brcc	.+2      	; 0xd08 <__gesf2+0x6>
 d06:	8f ef       	ldi	r24, 0xFF	; 255
 d08:	08 95       	ret

00000d0a <__mulsf3>:
 d0a:	0b d0       	rcall	.+22     	; 0xd22 <__mulsf3x>
 d0c:	c0 cf       	rjmp	.-128    	; 0xc8e <__fp_round>
 d0e:	b1 df       	rcall	.-158    	; 0xc72 <__fp_pscA>
 d10:	28 f0       	brcs	.+10     	; 0xd1c <__mulsf3+0x12>
 d12:	b6 df       	rcall	.-148    	; 0xc80 <__fp_pscB>
 d14:	18 f0       	brcs	.+6      	; 0xd1c <__mulsf3+0x12>
 d16:	95 23       	and	r25, r21
 d18:	09 f0       	breq	.+2      	; 0xd1c <__mulsf3+0x12>
 d1a:	a2 cf       	rjmp	.-188    	; 0xc60 <__fp_inf>
 d1c:	a7 cf       	rjmp	.-178    	; 0xc6c <__fp_nan>
 d1e:	11 24       	eor	r1, r1
 d20:	ea cf       	rjmp	.-44     	; 0xcf6 <__fp_szero>

00000d22 <__mulsf3x>:
 d22:	c6 df       	rcall	.-116    	; 0xcb0 <__fp_split3>
 d24:	a0 f3       	brcs	.-24     	; 0xd0e <__mulsf3+0x4>

00000d26 <__mulsf3_pse>:
 d26:	95 9f       	mul	r25, r21
 d28:	d1 f3       	breq	.-12     	; 0xd1e <__mulsf3+0x14>
 d2a:	95 0f       	add	r25, r21
 d2c:	50 e0       	ldi	r21, 0x00	; 0
 d2e:	55 1f       	adc	r21, r21
 d30:	62 9f       	mul	r22, r18
 d32:	f0 01       	movw	r30, r0
 d34:	72 9f       	mul	r23, r18
 d36:	bb 27       	eor	r27, r27
 d38:	f0 0d       	add	r31, r0
 d3a:	b1 1d       	adc	r27, r1
 d3c:	63 9f       	mul	r22, r19
 d3e:	aa 27       	eor	r26, r26
 d40:	f0 0d       	add	r31, r0
 d42:	b1 1d       	adc	r27, r1
 d44:	aa 1f       	adc	r26, r26
 d46:	64 9f       	mul	r22, r20
 d48:	66 27       	eor	r22, r22
 d4a:	b0 0d       	add	r27, r0
 d4c:	a1 1d       	adc	r26, r1
 d4e:	66 1f       	adc	r22, r22
 d50:	82 9f       	mul	r24, r18
 d52:	22 27       	eor	r18, r18
 d54:	b0 0d       	add	r27, r0
 d56:	a1 1d       	adc	r26, r1
 d58:	62 1f       	adc	r22, r18
 d5a:	73 9f       	mul	r23, r19
 d5c:	b0 0d       	add	r27, r0
 d5e:	a1 1d       	adc	r26, r1
 d60:	62 1f       	adc	r22, r18
 d62:	83 9f       	mul	r24, r19
 d64:	a0 0d       	add	r26, r0
 d66:	61 1d       	adc	r22, r1
 d68:	22 1f       	adc	r18, r18
 d6a:	74 9f       	mul	r23, r20
 d6c:	33 27       	eor	r19, r19
 d6e:	a0 0d       	add	r26, r0
 d70:	61 1d       	adc	r22, r1
 d72:	23 1f       	adc	r18, r19
 d74:	84 9f       	mul	r24, r20
 d76:	60 0d       	add	r22, r0
 d78:	21 1d       	adc	r18, r1
 d7a:	82 2f       	mov	r24, r18
 d7c:	76 2f       	mov	r23, r22
 d7e:	6a 2f       	mov	r22, r26
 d80:	11 24       	eor	r1, r1
 d82:	9f 57       	subi	r25, 0x7F	; 127
 d84:	50 40       	sbci	r21, 0x00	; 0
 d86:	8a f0       	brmi	.+34     	; 0xdaa <__mulsf3_pse+0x84>
 d88:	e1 f0       	breq	.+56     	; 0xdc2 <__mulsf3_pse+0x9c>
 d8a:	88 23       	and	r24, r24
 d8c:	4a f0       	brmi	.+18     	; 0xda0 <__mulsf3_pse+0x7a>
 d8e:	ee 0f       	add	r30, r30
 d90:	ff 1f       	adc	r31, r31
 d92:	bb 1f       	adc	r27, r27
 d94:	66 1f       	adc	r22, r22
 d96:	77 1f       	adc	r23, r23
 d98:	88 1f       	adc	r24, r24
 d9a:	91 50       	subi	r25, 0x01	; 1
 d9c:	50 40       	sbci	r21, 0x00	; 0
 d9e:	a9 f7       	brne	.-22     	; 0xd8a <__mulsf3_pse+0x64>
 da0:	9e 3f       	cpi	r25, 0xFE	; 254
 da2:	51 05       	cpc	r21, r1
 da4:	70 f0       	brcs	.+28     	; 0xdc2 <__mulsf3_pse+0x9c>
 da6:	5c cf       	rjmp	.-328    	; 0xc60 <__fp_inf>
 da8:	a6 cf       	rjmp	.-180    	; 0xcf6 <__fp_szero>
 daa:	5f 3f       	cpi	r21, 0xFF	; 255
 dac:	ec f3       	brlt	.-6      	; 0xda8 <__mulsf3_pse+0x82>
 dae:	98 3e       	cpi	r25, 0xE8	; 232
 db0:	dc f3       	brlt	.-10     	; 0xda8 <__mulsf3_pse+0x82>
 db2:	86 95       	lsr	r24
 db4:	77 95       	ror	r23
 db6:	67 95       	ror	r22
 db8:	b7 95       	ror	r27
 dba:	f7 95       	ror	r31
 dbc:	e7 95       	ror	r30
 dbe:	9f 5f       	subi	r25, 0xFF	; 255
 dc0:	c1 f7       	brne	.-16     	; 0xdb2 <__mulsf3_pse+0x8c>
 dc2:	fe 2b       	or	r31, r30
 dc4:	88 0f       	add	r24, r24
 dc6:	91 1d       	adc	r25, r1
 dc8:	96 95       	lsr	r25
 dca:	87 95       	ror	r24
 dcc:	97 f9       	bld	r25, 7
 dce:	08 95       	ret

00000dd0 <__udivmodsi4>:
 dd0:	a1 e2       	ldi	r26, 0x21	; 33
 dd2:	1a 2e       	mov	r1, r26
 dd4:	aa 1b       	sub	r26, r26
 dd6:	bb 1b       	sub	r27, r27
 dd8:	fd 01       	movw	r30, r26
 dda:	0d c0       	rjmp	.+26     	; 0xdf6 <__udivmodsi4_ep>

00000ddc <__udivmodsi4_loop>:
 ddc:	aa 1f       	adc	r26, r26
 dde:	bb 1f       	adc	r27, r27
 de0:	ee 1f       	adc	r30, r30
 de2:	ff 1f       	adc	r31, r31
 de4:	a2 17       	cp	r26, r18
 de6:	b3 07       	cpc	r27, r19
 de8:	e4 07       	cpc	r30, r20
 dea:	f5 07       	cpc	r31, r21
 dec:	20 f0       	brcs	.+8      	; 0xdf6 <__udivmodsi4_ep>
 dee:	a2 1b       	sub	r26, r18
 df0:	b3 0b       	sbc	r27, r19
 df2:	e4 0b       	sbc	r30, r20
 df4:	f5 0b       	sbc	r31, r21

00000df6 <__udivmodsi4_ep>:
 df6:	66 1f       	adc	r22, r22
 df8:	77 1f       	adc	r23, r23
 dfa:	88 1f       	adc	r24, r24
 dfc:	99 1f       	adc	r25, r25
 dfe:	1a 94       	dec	r1
 e00:	69 f7       	brne	.-38     	; 0xddc <__udivmodsi4_loop>
 e02:	60 95       	com	r22
 e04:	70 95       	com	r23
 e06:	80 95       	com	r24
 e08:	90 95       	com	r25
 e0a:	9b 01       	movw	r18, r22
 e0c:	ac 01       	movw	r20, r24
 e0e:	bd 01       	movw	r22, r26
 e10:	cf 01       	movw	r24, r30
 e12:	08 95       	ret

00000e14 <__tablejump2__>:
 e14:	ee 0f       	add	r30, r30
 e16:	ff 1f       	adc	r31, r31
 e18:	00 24       	eor	r0, r0
 e1a:	00 1c       	adc	r0, r0
 e1c:	0b be       	out	0x3b, r0	; 59
 e1e:	07 90       	elpm	r0, Z+
 e20:	f6 91       	elpm	r31, Z
 e22:	e0 2d       	mov	r30, r0
 e24:	09 94       	ijmp

00000e26 <_exit>:
 e26:	f8 94       	cli

00000e28 <__stop_program>:
 e28:	ff cf       	rjmp	.-2      	; 0xe28 <__stop_program>
